'use strict';(function(){const indexCfg={encode:false,tokenize:function(str){return str.replace(/[\x00-\x7F]/g,'').split('');}};indexCfg.doc={id:'id',field:['title','content'],store:['title','href','section'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/docs/','title':"Docs",'section':"Home",'content':"  Documents     "});index.add({'id':1,'href':'/docs/documents/projects/','title':"Projects",'section':"Documents",'content':"Projects #     hU-Go-Girl   HUGO (feat Github)를 이용한 정적 웹페이지 생성   "});index.add({'id':2,'href':'/docs/documents/projects/hugogirl/','title':"hU-Go-Girl",'section':"Projects",'content':"hU-Go-Girl #   여러가지를 진행하는 중에 기록이 필요한 상황들이 지속적으로 발생했습니다. 수많은 링크, 다양한 관심, 넘쳐나는 정보. 결국 그 와중에 습득한 내용들을 정리할 장치가 좀 필요했습니다. 또한 언제고 발생할 이직을 위한 포트폴리오나 동적 이력서도 같이 고민 중이 였습니다. 여러가지를 실험할 동적 웹보다는 단순 기록을 위한 정적 웹이 먼저 필요하다고 판단했고 이 프로젝트는 그에 대한 결과물입니다.\n이 과제를 통해 다음과 같은 주제를 다루게 될겁니다.\n Static Web page Hugo Jekyll Github Markdown Buy me a coffee   -- Static vs Dynamic #  정적웹은 편의점 같은 서비스를 의미합니다. 손님이 들어와서 선택할 수 있는 김밥은 제품으로 출시된 김밥 뿐입니다. 정적웹은 사용자의 요청에 준비된 응답만을 제공합니다.\n mermaid.initialize({ \"flowchart\": { \"useMaxWidth\":true }, \"theme\": \"default\" } ) graph LR A[ 사용자 ]--|요청|B[웹서버] B--|응답|A style A fill:#ffffff,stroke:#000000,stroke-width:1px style B fill:#ffffff,stroke:#000000,stroke-width:1px 동적웹은 요리점 같은 서비스를 의미합니다. 손님이 들어와서 원하는 음식을 주문하면 거기에 맞춰 요리를 제공합니다. 동적웹은 사용자의 요청을 처리하기 위해 좀더 복잡한 별도의 가공을 거치게 됩니다.\ngraph LR D[ 사용자 ]--|요청|F[웹서버]--|프로세싱|G[(DB서버)] G--|응답|F--|응답|D style D fill:#ffffff,stroke:#000000,stroke-width:1px style F fill:#ffffff,stroke:#000000,stroke-width:1px style G fill:#ffffff,stroke:#000000,stroke-width:1px 개인적인 용도로 웹페이지를 구성한다면 그리고 굳이 동적 서비스를 필요로 하지 않는다면 필요 이상의 복잡함을 감내할 필요는 없을 것입니다. 저도 역시 단순 기록의 용도라 지금은 정적웹이 적절한 선택인것 같습니다.\nGithub #  Git은 리눅스 커널의 소스코드 관리를 위해 리누스 토발즈1가 개발한 툴입니다. 공동 개발 상황에서 소스코드의 형상관리는 매우 어렵고 필수적인 요소입니다. 이런 Git을 위한 저장소를 무료로 제공하고 있는 대표적 사이트가 Github이며 이 쪽에서 제공되고 있는 서비스 중에는 웹 호스팅 서비스도 포함되어 있습니다.\n Github 가입 Repository 생성 Github Page 설정 Add a README file 포함 Setting \u0026gt; Github Pages \u0026gt; Source 설정  별다른 설정없이도 위와 같이 진행하였다면 Github가 제공하는 Default README.MD 화일을 자신 계정명이 포함되어 있는 주소에서 확인할 수 있습니다.\nJekyll vs Hugo #  Jekyll은 Github의 창립자2가 Ruby3라는 언어로 만든 정적 웹 생성기입니다. Github 가이드를 따라가다 보면 자연스럽게 Jekyll을 사용 해서 GitHub Page를 만드는 것을 설명하고 있습니다. Jekyll을 사용하면 별도의 빌드 없이 Git Push만으로도 Publish 된다는 특징이 있습니다.\nHugo는 최근 몇 년간 인기가 급상승 중인 구글의 Go로 만들어진 정적 웹 생성기입니다. 가볍고 빠른 속도를 장점으로 하고 있습니다. 이와 유사한 툴로 Hexo도 있었습니다만 사용해보진 못했습니다.4\n세가지 툴을 놓고 고민했보았고 Jekyll로 한번 Hugo로 한번 테스트 해본 후 저의 최종적인 선택은 Hugo였습니다. Jekyll이 디자인적으로나 기능적으로 완성도 높은 테마가 많았고 Github와의 연동에서 빌드없이 사용할 수 있다는 점은 저를 끝까지 고민하게 만들었습니다. 하지만 다루기 생소한 Ruby도 문제였지만 포스트가 늘어 날때마다 비례해서 늘어나는 빌드 속도는 나중에 문제가 될듯 보였습니다.5 실험적으로 사이트를 만들때 수시로 빌드하고 로컬로 테스트하게 되는데 페이지가 많아진다면 분명 괴로워지는 시점이 올듯했고 결국 Hugo를 선택하게 되었습니다.\nTheme #  문서와 기록이 주 용도이기 때문에 텍스트 기반에 간결한 테마를 검토했습니다. Jekyll에서는 Just-the-doc 테마를 고민했었고 Hugo에서는 Book 테마를 고민했습니다. Hugo를 사용함으로 자동적으로 Book 테마를 사용하게 되었는데 기존 디자인에서 몇몇 가지를 수정하여 사용하고 있습니다.\nMarkdown #  Markdown은 HTML과 같은 마크업 언어입니다. 마크업 언어라는건 별도 표현을 위한 기술을 의미합니다. 메모장에 아래 처럼 어떤 약속된 문법으로 작성하고 Hugo로 build하게 되면 약속된 HTML의 형태로 변경되게 됩니다.\nMarkdown은 이렇게 **표시**됩니다 Markdown은 이렇게 ~~표시~~됩니다 Markdown은 이렇게 표시됩니다\nMarkdown은 이렇게 표시됩니다\n문법이 쉽고 간단해서 빠르게 익힐 수 있고 글을 쓰는데에만 집중 할 수 있는 장점이 있다고 합니다.6\nBuy Me a Coffee #  선택적인 사항입니다만 최근 개인 블로그에서도 후원을 받을 수 있는 방법들이 소개되고 있습니다. Buy me a coffee라는 사이트인데요 먼저 Paypal에 가입하시고 BMC에도 가입하셔서 연동을 하시게되면 사이트의 방문객이 1$~5$ 정도를 해당 계좌로 송금할 수 있다고 합니다. 한국에서는 Paypal을 이용한 국내 계정간의 금전거래가 불가능한걸로 되어 있습니다.7 왼쪽 커피 아이콘으로 나름 커스터마이징 해서 달아 보았습니다만 저도 아직 기부를 받아 본적이 없어 실제적으로 작동하는지는 확인해보지 못했습니다.\nConclusion #  현재 이 글의 작성 방식은 1) 사용 에디터에 Markdown을 이용해 글을 작성하고 2) Hugo를 사용해 Public 경로로 Build하고 3) Git을 통해 Github에 Push하여 Web으로 올리고 있습니다. (현재는 Publish를 좀더 편안히 할 수 있는 방법을 찾아 보고 있습니다.)\nPost Script #  매번 글을 Build하고 Git에 올리는 걸 수동으로 진행하다가 다음과 같이 Shell Script를 구현해서 처리했습니다. 맨날 귀찮았는데 좀 살것 같네요.\n# 1) Hugo Build 경로를 삭제합니다. rm -rf ./public/ # 2) Hugo Build 합니다. hugo -t book # 3) 전 제 github를 Hugo build 경로 안에 위치 시켰습니다. 해당내용을 .git만 제외하고 삭제하는 내용입니다. find ./youraccount.github.io/ -maxdepth 1 ! -name \u0026#34;.git\u0026#34; ! -name \u0026#34;youraccount.github.io\u0026#34; -exec rm -rf {} \\; # 4) public을 pull한 경로로 옮깁니다. cp -r ./public/* ./youraccount.github.io/ # 5) pull한 경로로 이동합니다. cd ./youraccount.github.io # 6) add / commit / push 합니다. git add . git commit -m \u0026#34;$(date +\u0026#34;%y%m%d_%H:%M\u0026#34;)\u0026#34; git push origin master \n Reference #   생활코딩 : 버전관리 시스템 생활코딩 : Github  Footnote #    저명하신 키보드 워리어 \u0026#x21a9;\u0026#xfe0e;\n 톰 프레스톤 워너 \u0026#x21a9;\u0026#xfe0e;\n 일본산 \u0026#x21a9;\u0026#xfe0e;\n 비교 자료이지만 개인취향일듯 합니다 \u0026#x21a9;\u0026#xfe0e;\n 이런 내용이 검색되는걸 보면 확실히 문제가 있어보입니다. \u0026#x21a9;\u0026#xfe0e;\n 전 아직 집중을 할 수 없네요. \u0026#x21a9;\u0026#xfe0e;\n 한국 PayPal FAQs \u0026#x21a9;\u0026#xfe0e;\n   "});index.add({'id':3,'href':'/docs/documents/frontend/','title':"Front End",'section':"Documents",'content':"Front End #     Markdown   Markdown 문법 설명   "});index.add({'id':4,'href':'/docs/documents/frontend/markdown/','title':"Markdown",'section':"Front End",'content':"Markdown #   Markdown은 HTML 변환이 가능한 텍스트 기반 경량 마크업 언어입니다. 특수 기호와 문자를 이용해 쉽게 쓰고 읽을 수 있으며 문법이 비교적 쉽고 간단한 것이 특징입니다. 제 경우 익숙해질 수 있다면 글쓰기 자체에 집중할 수 있을 것으로 보여집니다.\nHeader #  마크다운 # H1 크기 제목입니다. ## H2 크기 제목입니다. ### H3 크기 제목입니다. #### H4 크기 제목입니다. ##### H5 크기 제목입니다. ###### H6 크기 제목입니다. 적용결과 H1 크기 제목입니다. H2 크기 제목입니다. H3 크기 제목입니다. H4 크기 제목입니다. H5 크기 제목입니다. H6 크기 제목입니다.  Emphasis #  마크다운 *강조 형태 1* _강조 형태 2_ **강조 형태 3** __강조 형태 4__ ~~강조 형태 5~~ 적용결과 강조 형태 1\n강조 형태 2\n강조 형태 3\n강조 형태 4\n강조 형태 5\n List #  마크다운 1. 순서 리스트 1 2. 순서 리스트 2 3. 순서 리스트 3 - 리스트 1 - 리스트 2 - 리스트 3 - 리스트 1 - 리스트 1-1 - 리스트 1-1-1 - 리스트 2 - 리스트 2-1 - 리스트 2-1-1 - 리스트 3 - 리스트 3-1 - 리스트 3-1-1 적용결과  순서 리스트 1 순서 리스트 2 순서 리스트 3    리스트 1\n  리스트 2\n  리스트 3\n  리스트 1\n 리스트 1-1  리스트 1-1-1      리스트 2\n 리스트 2-1  리스트 2-1-1      리스트 3\n 리스트 3-1  리스트 3-1-1       Blockquotes #  마크다운 \u0026gt; 인용 1 \u0026gt; 인용 2 \u0026gt; 인용 3 \u0026gt; 인용 1 \u0026gt;\u0026gt; 인용 2 \u0026gt;\u0026gt;\u0026gt; 인용 3 탭) 인용 1 탭) 인용 2 탭) 인용 3 적용결과  인용 1\n인용 2\n인용 3\n  인용 1\n 인용 2\n 인용 3\n   탭) 인용 1 탭) 인용 2 탭) 인용 3   Inline code #  마크다운 ```Rust fn main () { println!(\u0026#34;Hello World!\u0026#34;); } ``` \u0026lt;pre\u0026gt;\u0026lt;code\u0026gt; { fn main () { println!(\u0026#34;Hello World!\u0026#34;); } } \u0026lt;/code\u0026gt;\u0026lt;/pre\u0026gt; 적용결과 fn main () { println!(\u0026#34;Hello World!\u0026#34;); }  { fn main () { println!(\"Hello World!\"); } }   Tables #  마크다운 | Header1 | Header2 | Header3 | Header4 | Header5 | | :------ | ------: | :-----: | ------- | ------- | | a | b | c | **d** | ~~e~~ | | f | g | h | i | j | | k | l | m | n | o | 적용결과    Header1 Header2 Header3 Header4 Header5     a b c d e   f g h i j   k l m n o     Checkbox #  마크다운 1. [ ] To-Do 1 2. [x] To-Do 2 - [ ] To-Do 3 - [x] To-Do 4 적용결과  To-Do 1 To-Do 2   To-Do 3 To-Do 4   Hyperlinks #  마크다운 [Prokoptasis](https://prokoptasis.github.io/docs/documents/frontend/markdown/) 적용결과 Prokoptasis Images #  마크다운 ![coffee](../../../../../coffee.jpg) [![coffee](../../../../../coffee.jpg)](https://prokoptasis.github.io/docs/documents/frontend/markdown/) 적용결과  Iframe #  마크다운 \u0026lt;iframe width=\u0026#34;100%\u0026#34; height=\u0026#34;400px\u0026#34; src=\u0026#34;https://www.youtube.com/embed/4Vs25c7dzTQ\u0026#34; frameborder=\u0026#34;0\u0026#34; allow=\u0026#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\u0026#34; allowfullscreen\u0026gt;\u0026lt;/iframe\u0026gt; 적용결과   Etc #  마크다운 라인1 *** 라인2 --- 라인3 ___ 라인4 \u0026lt;hr\u0026gt; 문장 1 \u0026lt;br\u0026gt; 문장 2 (공백3칸) 문장 3 (공백없음) 문장 4 \u0026lt;div align=\u0026#34;center\u0026#34;\u0026gt;가운데 정렬\u0026lt;/div\u0026gt; \u0026lt;span style=\u0026#34;color:red\u0026#34;\u0026gt;빨\u0026lt;/span\u0026gt; \u0026lt;span style=\u0026#34;color:#0055FF\u0026#34;\u0026gt;파\u0026lt;/span\u0026gt; \u0026lt;span style=\u0026#34;color:rgb(21, 250, 16)\u0026#34;\u0026gt;녹\u0026lt;/span\u0026gt; 적용결과 라인1\n 라인2\n 라인3\n 라인4\n 문장 1 문장 2 (공백3칸)\n문장 3 (공백없음) 문장 4\n가운데 정렬 빨 파 녹\n Footnotes #  각주[^1] 각주1\n  각주입니다. \u0026#x21a9;\u0026#xfe0e;\n   "});index.add({'id':5,'href':'/docs/documents/backend/','title':"Back End",'section':"Documents",'content':"Back End #     GO   GO   SQL   SQL 문법 설명   "});index.add({'id':6,'href':'/docs/documents/backend/go/','title':"GO",'section':"Back End",'content':"GO #     GO Basic 1   GO Basic 1   GO Basic 2   GO Basic 2   "});index.add({'id':7,'href':'/docs/documents/backend/sql/','title':"SQL",'section':"Back End",'content':"SQL #     SQL Basic 1   SQL Basic Query 1   SQL Basic 2   SQL Basic Query 2   SQL Basic 3   SQL Basic Query 3   "});index.add({'id':8,'href':'/docs/documents/backend/sql/sql01/','title':"SQL Basic 1",'section':"SQL",'content':"SQL Basic 1 #   SQL은 Sturctured Query Langugage의 약자로 데이터베이스의 데이터를 관리하기 위해 사용하는 언어입니다. 자료의 검색과 관리, 스키마의 생성과 수정, 객체의 접근 조정 및 관리의 기능을 하게됩니다. ANSI SQL 기본 문법은 원래 어떤 데이터베이스와도 호환이 가능해야 하지만 통상 Vendor들이 표준을 잘지키지않는 편이라 기본적인 수준에서만 호환이 가능합니다. NoSQL 계열의 데이터베이스에서는 사용되지 않습니다.\n저는 일단 통상 제가 사용하고 있는 오라클사의 SQL을 기준으로 설명드리겠습니다.\nLive SQL #  정상적인 실습환경을 원한다면 XE버전이라도 오라클 데이터베이스를 설치하고 SQL Plus든 SQL Developer든 조회툴을 설치해야겠지만 개별 환경에 맞춰 설치하는 과정이 다소 까다롭습니다. 이에 오라클사의 Live SQL이라는 서비스로 대체해서 진행 하고자 합니다. 사용을 원하시면 Oracle에 가입하시고 Oracle Live SQL로 접속하셔서 \u0026ldquo;Start Coding Now\u0026quot;로 Live SQL을 실행합니다.\nLive SQL Basic #  SQL Worksheet 아래에 SQL을 쓰고 실행할 수 있는 Editor 창이 있고 그 밑에는 질의 결과를 조회할 수 있는 창이 있습니다. 오른쪽 위에는 \u0026ldquo;Run\u0026rdquo; Button이 있어 SQL을 실행할 수 있습니다. Ctrl-Enter를 통해도 역시 실행하실 수 있습니다. 다만 여러 문장을 적고 Ctrl-Enter나 Run을 실행하게되면 문장 모두가 수행되게 됩니다. 하나의 쿼리만을 개별적으로 실행하고 싶으시다면 블럭으로 선택 후 실행하셔야 합니다.\n여기까지 되셨다면 실습환경은 준비되었습니다.\nHello World! #  우선 Hello World! 부터 찍읍시다.\nselect \u0026#39;Hello World!\u0026#39; from dual; 그냥 간단히 찍어 보았습니다. ^^\nDDL / DML / DCL #  보통은 Select 부터 설명드립니다만 Oracle Live SQL 특성상 조회를 할만한 예제 테이블이 없어서 앞으로 하게될 Create문의 이해를 위해 DDL, DML, DCL 개념 부터 먼저 설명드립니다.\nDDL (Data Definition Language) #  데이터 정의 언어로 데이터베이스에 오브젝트를 생성,삭제,변경 및 제거하는 명령문을 이야기 합니다.\ncreate : 데이터베이스에 오브젝트를 생성합니다. drop : 데이터베이스에 오브젝트를 삭제합니다. alter : 데이터베이스에 오브젝트를 변경합니다. truncate : 테이블에서 데이터를 삭제합니다.\nDML (Data Manipulation Languge) #  데디터 조작 언어로 데이터베이스 테이블에서 데이터를 질의,생성,수정 및 삭제하는 질의문을 이야기 합니다.\nselect : 테이블에서 데이터를 검색 insert : 테이블에 데이터를 생성 update : 테이블에서 데이터를 변경 delete : 데이블에서 데이터를 삭제\nDCL (Data Control Language) #  데이터 제어 언어로 데이터베이스의 권한을 관리하는데 사용하는 명령문을 이야기 합니다.\ngrant : 데이터베이스 사용자에게 특정 권한을 부여 revoke : 데이터베이스 사용자에게 특정 권한을 제거\nTable Creation #  실습을 위해 예제 테이블을 생성하고 단순 질의문을 통해 결과를 조회해보도록 하겠습니다.\n작성쿼리 create table my_table_1 ( column_1 varchar2(10), column_2 number, column_3 date ) ; insert into my_table_1 (column_1,column_2,column_3) values (\u0026#39;홍길동\u0026#39;,23,sysdate); insert into my_table_1 (column_1,column_2,column_3) values (\u0026#39;김철수\u0026#39;,19,sysdate); insert into my_table_1 (column_1,column_2,column_3) values (\u0026#39;이영희\u0026#39;,32,sysdate); insert into my_table_1 (column_1,column_2,column_3) values (\u0026#39;박민호\u0026#39;,22,sysdate); insert into my_table_1 (column_1,column_2,column_3) values (\u0026#39;김종철\u0026#39;,45,sysdate); insert into my_table_1 (column_1,column_2,column_3) values (\u0026#39;김철수\u0026#39;,36,sysdate); insert into my_table_1 (column_1,column_2,column_3) values (\u0026#39;신영희\u0026#39;,32,sysdate); insert into my_table_1 (column_1,column_2,column_3) values (\u0026#39;최철호\u0026#39;,11,sysdate); 실행결과 Table created.\n1 row(s) inserted.\n1 row(s) inserted.\n1 row(s) inserted.\n1 row(s) inserted.\n1 row(s) inserted.\n1 row(s) inserted.\n1 row(s) inserted.\n1 row(s) inserted.\n 데이터 생성 결과를 조회해보도록 하겠습니다. 아래 쿼리를 작성하고 실행하실때 아래 부분만 블록으로 선택하시고 실행하시거나 또는 앞의 내용을 지우고 실행하셔야 됩니다. 만일 블록 선택없이 실행시 create table 구문은 에러가 나고 insert는 중보처리되면서 select는 10건의 결과를 보여 줄 수 있습니다.\n작성쿼리 select * from my_table_1 ; 실행결과    COLUMN_1 COLUMN_2 COLUMN_3     홍길동 23 10-OCT-20   김철수 19 10-OCT-20   이영희 32 10-OCT-20   박민호 22 10-OCT-20   김종철 45 10-OCT-20   김철수 36 10-OCT-20   신영희 32 10-OCT-20   최철민 11 10-OCT-20    Download CSV 8 rows selected. 위의 실행결과와 같이 정상적으로 조회 되었다면 이제 본격적으로 SQL을 진행해보도록 하겠습니다.\n 다음글  "});index.add({'id':9,'href':'/docs/documents/backend/sql/sql02/','title':"SQL Basic 2",'section':"SQL",'content':"SQL Basic 2 #   Select, Where, 기본적인 함수와 Union, Join에 대해 알아보겠습니다.\nSelect / From #  가장 기본적인 조회 문입니다. \u0026ldquo;Select 컬럼명 from 테이블\u0026quot;로 테이블의 지정 컬럼명의 내용을 조회합니다.\n-- 주석입니다. select * from my_table_1; -- 컬럼명을 지정합니다. select column_1,column_3 from my_table_1; Where / And #  Where 절을 통해 조회 데이터에 조건을 걸 수 있습니다. Excel의 필터개념입니다. 이때 부등호를 사용할 수 있으며 문자열의 경우 like 및 wildcard를 이용한 검색이 가능합니다. Between과 같은 조건도 가능하며 in/not in을 통해 특정 조건을 지정할 수 있습니다. Or 절을 통해 선택적 조건 조회가 가능하나 And절과 사용할 경우 개념을 유의하셔야 합니다.\n-- where select * from my_table_1 where column_2 = 32; -- where / 부등호 1 select * from my_table_1 where column_2 \u0026lt;= 30; -- where / 부등호 2 select * from my_table_1 where column_2 \u0026gt;= 30; -- where / 부등호 3 select * from my_table_1 where column_2 \u0026gt; 30; -- where / 부등호 4 select * from my_table_1 where column_2 \u0026lt; 30; -- where / and select * from my_table_1 where column_2 \u0026gt; 10 and column_2 \u0026lt; 40; -- where / and / 문자열 1 select * from my_table_1 where column_1 = \u0026#39;홍길동\u0026#39; and column 2 = 23; -- where / and / 문자열 2 select * from my_table_1 where column_1 != \u0026#39;홍길동\u0026#39;; -- where / and / 문자열 3 select * from my_table_1 where column_1 \u0026lt;\u0026gt; \u0026#39;홍길동\u0026#39;; -- where / and / 문자열 / like 1 select * from my_table_1 where column_1 like \u0026#39;김%\u0026#39;; -- where / and / 문자열 / like 2 select * from my_table_1 where column_1 like \u0026#39;%철%\u0026#39;; -- where / and / 문자열 / like 3 select * from my_table_1 where column_1 like \u0026#39;%철\u0026#39;; -- where / and / 문자열 / like 4 select * from my_table_1 where column_1 like \u0026#39;김%철\u0026#39;; -- where / and / 문자열 / like 5 select * from my_table_1 where column_1 not like \u0026#39;%철\u0026#39;; -- where / and / between select * from my_table_1 where column_2 between 22 and 32; -- where / and / in select * from my_table_1 where column_1 in (\u0026#39;이영희\u0026#39;,\u0026#39;김철수\u0026#39;); -- where / and / not in select * from my_table_1 where column_1 not in (\u0026#39;이영희\u0026#39;,\u0026#39;김철수\u0026#39;); -- where / and / in / or select * from my_table_1 where column_1 in (\u0026#39;이영희\u0026#39;,\u0026#39;김철수\u0026#39;) or column_2 = 22; -- where / and / or / and 1 select * from my_table_1 where column_1 in (\u0026#39;이영희\u0026#39;,\u0026#39;김철수\u0026#39;) or column_2 = 22 and column_1 like \u0026#39;%수\u0026#39;; -- where / and / or / and 2 select * from my_table_1 where (column_1 in (\u0026#39;이영희\u0026#39;,\u0026#39;김철수\u0026#39;) or column_2 = 22) and column_1 like \u0026#39;%수\u0026#39;; dual / + - * / #  dual은 가상테이블입니다. 아무런 테이블 조회 없이 Select의 사칙연산을 수행할 수 있습니다. mod, power, sign, cos, tan 와 같은 계산 함수들이 있습니다. 숫자, 텍스트, 널, date와 같은 형태가 있습니다. number와 null은 계산되지 않습니다. number와 text는 text가 숫자일때 계산은 됩니다. (다만 여러가지 상황에서 에러가 발생될 수 있습니다.) number와 text에서 text가 문자일대는 에러가 발생됩니다.\n-- dual / + - * / select 2+3, 5-2, 2*3, 8/2 from dual; -- mod, power, sign, cos, tan select mod(7,3),power(2,3),sign(1),cos(1),tan(1) from dual; -- number, text, null, number+null, date select 1, \u0026#39;TEXT\u0026#39;, null, 10+2+null, sysdate from dual; -- number+null = null select 10+2+null from dual; -- number+text(number) = number select 10+2+\u0026#39;3\u0026#39; from dual; -- number+text : error select 10+2+\u0026#39;A\u0026#39; from dual; -- lower/upper select \u0026#39;Case\u0026#39;,lower(\u0026#39;Case\u0026#39;),upper(\u0026#39;Case\u0026#39;) from dual; count / ditinct / alias / lower / upper #  기본적인 함수들을 사용해보겠습니다.\n-- count select count(*) from my_table_1; -- distinct select distinct column_1 from my_table_1; -- distinct / count select count(distinct column_1),count(column_1) from my_table_1; -- distinct / count / alias select count(distinct column_1) col1,count(column_1) col2,count(tab.column_1) col3 from my_table_1 tab; from / nested from / with as 1 / with as 2 / with as 3 #  from 을 nested로 배치하여 조회할 수 있습니다. with / as 문을 통해 위치를 바꿀 수 있습니다. with / as 문은 여러 필요에 따라 추가 할 수 있습니다. with / as 문에 nested from절을 같이 사용할 수도 있습니다. nested 된 from 절도 역시 추가가 가능합니다만 일단 지금은 넘어가겠습니다.\n-- from 1 select column_1,column_2,column_2+10 column_3 from my_table_1 where column_1 in (\u0026#39;홍길동\u0026#39;,\u0026#39;김철수\u0026#39;,\u0026#39;이영희\u0026#39;) ; -- nested from select * from ( select column_1,column_2,column_2+10 column_3 from my_table_1 where column_1 in (\u0026#39;홍길동\u0026#39;,\u0026#39;김철수\u0026#39;,\u0026#39;이영희\u0026#39;) ) ; -- with 1 with tab_1 as ( select column_1,column_2,column_2+10 column_3 from my_table_1 where column_1 in (\u0026#39;홍길동\u0026#39;,\u0026#39;김철수\u0026#39;,\u0026#39;이영희\u0026#39;) ) select * from tab_1 ; -- with 2 with tab_1 as ( select column_1,column_2,column_2+10 column_3 from my_table_1 where column_1 in (\u0026#39;홍길동\u0026#39;,\u0026#39;김철수\u0026#39;,\u0026#39;이영희\u0026#39;) ) , tab_2 as ( select column_1,column_2,column_2+10 column_3 from my_table_1 where column_2 \u0026lt;= 30 ) select * from tab_2 ; -- with 3 with tab_1 as ( select column_1,column_2,column_2+10 column_3 from my_table_1 where column_1 in (\u0026#39;홍길동\u0026#39;,\u0026#39;김철수\u0026#39;,\u0026#39;이영희\u0026#39;) ) , tab_2 as ( select column_1,column_2,column_2+10 column_3 from my_table_1 where column_2 \u0026lt;= 30 ) select * from ( select * from tab_2 where column_1 like \u0026#39;%철%\u0026#39; ) ; union all / union / intersect / minus #  union all 두 테이블의 전체 항목이 이어져서 조회됩니다. 컬럼이 동일해야 됩니다. union 두 테이블의 전체 항목이 이어져서 조회되지만 중복항목은 제외됩니다. intersect 두 테이블의 공통 항목이 조회됩니다. minus 위의 조회테이블에서 아래 조회 테이블을 제외하고 남은 항목이 조회됩니다.\n-- union all with tab_1 as (select column_1,column_2,column_2+10 column_3 from my_table_1 where column_1 in (\u0026#39;홍길동\u0026#39;,\u0026#39;김철수\u0026#39;,\u0026#39;이영희\u0026#39;)) , tab_2 as (select column_1,column_2,column_2+10 column_3 from my_table_1 where column_2 \u0026lt;= 30) select * from tab_1 union all select * from tab_2 ; -- union with tab_1 as (select column_1,column_2,column_2+10 column_3 from my_table_1 where column_1 in (\u0026#39;홍길동\u0026#39;,\u0026#39;김철수\u0026#39;,\u0026#39;이영희\u0026#39;)) , tab_2 as (select column_1,column_2,column_2+10 column_3 from my_table_1 where column_2 \u0026lt;= 30) select * from tab_1 union all select * from tab_2 ; -- intersect with tab_1 as (select column_1,column_2,column_2+10 column_3 from my_table_1 where column_1 in (\u0026#39;홍길동\u0026#39;,\u0026#39;김철수\u0026#39;,\u0026#39;이영희\u0026#39;)) , tab_2 as (select column_1,column_2,column_2+10 column_3 from my_table_1 where column_2 \u0026lt;= 30) select * from tab_1 intersect select * from tab_2 ; -- minus with tab_1 as (select column_1,column_2,column_2+10 column_3 from my_table_1 where column_1 in (\u0026#39;홍길동\u0026#39;,\u0026#39;김철수\u0026#39;,\u0026#39;이영희\u0026#39;)) , tab_2 as (select column_1,column_2,column_2+10 column_3 from my_table_1 where column_2 \u0026lt;= 30) select * from tab_1 intersect select * from tab_2 ; join 1 / join 2 / join 3 / join 4 / join 5 #  join1 column_1 = column_1의 조건에 부합하는 공통항목이 조회된다. join2 column_1 = column_1과 column_2 = column_2의 조건에 부합하는 공통항목이 조회된다. join3 a table을 기준으로 left join 됩니다. join4 b table을 기준으로 right join 됩니다. join5 a와 b를 full join하게됩니다.\n-- join 1 with tab_1 as (select column_1,column_2,column_2+10 column_3 from my_table_1 where column_1 in (\u0026#39;홍길동\u0026#39;,\u0026#39;김철수\u0026#39;,\u0026#39;이영희\u0026#39;)) , tab_2 as (select column_1,column_2,column_2+10 column_3 from my_table_1 where column_2 \u0026lt;= 30) select * from tab_1 a, tab_2 b where a.column_1 = b.column_1 ; -- join 2 with tab_1 as (select column_1,column_2,column_2+10 column_3 from my_table_1 where column_1 in (\u0026#39;홍길동\u0026#39;,\u0026#39;김철수\u0026#39;,\u0026#39;이영희\u0026#39;)) , tab_2 as (select column_1,column_2,column_2+10 column_3 from my_table_1 where column_2 \u0026lt;= 30) select * from tab_1 a, tab_2 b where a.column_1 = b.column_1 and a.column_2 = b.column_2 ; -- join 3 with tab_1 as (select column_1,column_2,column_2+10 column_3 from my_table_1 where column_1 in (\u0026#39;홍길동\u0026#39;,\u0026#39;김철수\u0026#39;,\u0026#39;이영희\u0026#39;)) , tab_2 as (select column_1,column_2,column_2+10 column_3 from my_table_1 where column_2 \u0026lt;= 30) select * from tab_1 a, tab_2 b where a.column_1 = b.column_1 (+) and a.column_2 = b.column_2 (+) ; -- join 4 with tab_1 as (select column_1,column_2,column_2+10 column_3 from my_table_1 where column_1 in (\u0026#39;홍길동\u0026#39;,\u0026#39;김철수\u0026#39;,\u0026#39;이영희\u0026#39;)) , tab_2 as (select column_1,column_2,column_2+10 column_3 from my_table_1 where column_2 \u0026lt;= 30) select * from tab_1 a, tab_2 b where a.column_1 (+) = b.column_1 and a.column_2 (+) = b.column_2 ; -- join 5 with tab_1 as (select column_1,column_2,column_2+10 column_3 from my_table_1 where column_1 in (\u0026#39;홍길동\u0026#39;,\u0026#39;김철수\u0026#39;,\u0026#39;이영희\u0026#39;)) , tab_2 as (select column_1,column_2,column_2+10 column_3 from my_table_1 where column_2 \u0026lt;= 30) select * from tab_1 a full outer join tab_2 b on ( a.column_1 = b.column_1 and a.column_2 = b.column_2 ) ; \n 다음글  "});index.add({'id':10,'href':'/docs/documents/backend/sql/sql03/','title':"SQL Basic 3",'section':"SQL",'content':"SQL Basic 3 #   현재 작성중입니다.\n 다음글  "});index.add({'id':11,'href':'/docs/documents/backend/go/go01/','title':"GO Basic 1",'section':"GO",'content':"GO Basic 1 #   GO는 Google에서 개발한 최근 상승세가 가파른 Hot한 언어입니다. 쉽고 단순한 문법과 동시성에 대한 장점으로 생산성이 높다고 알려져 있습니다. Go의 기본적인 문법을 정리해보겠습니다. 저는 아래 사이트를 참조로 정리하였습니다.\n예제로 배우는 Go 프로그래밍\nHello World #  우선 Hello World 부터 찍어야 겠죠?\npackage main func main() { println(\u0026#34;Hello World!\u0026#34;) } Declare #  선언 및 할당은 방식은 다음과 같습니다.\npackage main func main() { // 선언 및 할당 \tvar a int var b float32 = 11. println(a, b) // 선언 및 할당 \ta = 10 b = 12.0 println(a, b) // 상수 \tconst c int = 10 const d string = \u0026#34;Hello\u0026#34; println(c, d) // 상수 나열 \tconst ( Visa = \u0026#34;Visa\u0026#34; Master = \u0026#34;MasterCard\u0026#34; Amex = \u0026#34;American Express\u0026#34; ) println(Visa, Master, Amex) // 상수 나열 \tconst ( Apple = iota Grape Orage ) println(Apple, Grape, Orage) } Reserved Keywords #  GO는 다음과 같은 25개의 예약어를 가지고 있습니다.\nbreak, case, chan, const, continue, const, default, const, defer, else,fallthrough, for, func, go, goto, if, import, interface, map, package, range, return, select, struct, switch, type, var   다음글  "});index.add({'id':12,'href':'/docs/documents/backend/go/go02/','title':"GO Basic 2",'section':"GO",'content':"GO Basic 2 #   정리중입니다.\n 다음글  "});index.add({'id':13,'href':'/docs/documents/devops/','title':"Dev ops",'section':"Documents",'content':"Dev ops #     Oracle   Description   Synology   Description   Ubuntu   Description   Docker   Description   AWS   Description   "});index.add({'id':14,'href':'/docs/documents/deeplearning/','title':"Deep Learning",'section':"Documents",'content':"Deep Learning #     Machine Learning   머신러닝/딥러닝 학습 자료   Python   Description   Tensorflow   Description   "});index.add({'id':15,'href':'/docs/documents/deeplearning/machinelearning/','title':"Machine Learning",'section':"Deep Learning",'content':"Machine Learning #   Introduction #  머신 러닝 관련 학습 자료들을 정리한 내용입니다.\nMachine Learning 분류 #  머신 러닝은 지도학습, 비지도학습, 강화학습으로 분류하며 지도학습은 다시 회귀와 분류, 비지도 학습은 군집화,변환,연관으로 분류할 수 있습니다. 인터넷 상에 다양한 설명이 있습니다만 그림으로 직관적으로 분류 할 수 있는 egoing님의 자료를 참조하였습니다. 세부내용은 제목에 링크된 위키피디어를 참조해보시기 바랍니다.\n Supervised Learning  Regression Classification   Unsupervised Learning  Clustering Transform Association   Reinforcement Learning  Linear Regression1 #  Regression이란 \u0026ldquo;Regression toward mean\u0026quot;으로 특정한 데이터는 전체의 평균으로 회귀하려는 속성을 나타내며 일정 데이터의 분포를 가장 잘 설명 할 수 있는 직선의 방정식을 찾아내는 것을 나타냅니다. 말로는 설명이 아렵고 아래처럼 분포된 데이터의 점으로 표현되는 데이터들을 가장 잘 표현할 수 있는 직선을 찾는 것을 의미합니다.\n  -- 위의 Linear Regression에서 직선의 방정식은 다음과 같이 나타낼 수 있습니다.\n Regression   \\( H(X) = WX\u0026#43;B ( y = ax \u0026#43; b ) \\)   \\( H : Hypothesis (가설) \\)   \\( W : Weight (기울기) \\)   \\( B : Bias (절편) \\)   그렇다면 데이터를 가장 잘 대변할 수 있는 직선은 무엇일까요? 아래 점으로 나타나는 데이터와 직선의 차이의 합이 가장 작을 수록 이들을 가장 잘 표현할 수 있다고 할 수 있습니다. 이러한 차이를 Cost라 하며 음수 차이와 양수 차이의 합이 상쇄되는 것을 막기 위해 제곱해서 사용하고 있습니다.\n  --  Cost  \\( Cost : H(x) - y \\)   \\( Total Cost : \\frac{(H(x_1)-y_1)^2 \u0026#43; (H(x_2)-y_2)^2 \u0026#43; ... \u0026#43; (H(x_n)-y_n)^2 }{n} \\)   \\( Total Cost : cost(W) = \\frac{1}{n}\\, \\textstyle\\sum_{i=1}^n \\,(Wx_i-y)^2 \\)   \\( Cost Function : cost(W,b) = \\frac{1}{n}\\, \\textstyle\\sum_{i=1}^n \\,(H(x_i)-y_i)^2 \\)   \\( Goal : minimize_w,_b cost(W,b) \\)   위 식에서와 같이 Goal은 가설과 실제 데이터의 차이의 제곱이 최소가 되는 기울기와 절편은 찾는 문제가 됩니다.\nGradient Descent #  위의 Cost Function에서 임의 점에서 시작하여 학습률 만큼 기울기가 낮은 쪽으로 진해하며 최적의 값을 찾는 방식을 경사하강법이라고 합니다. 임의의 점에서 시작하여 Learning Rate 만큼 미분을 진행하며 최소점을 찾는 방식으로 Convext 상황에서는 잘 작동하게 됩니다.2\n  --  Gradient Descent  \\( W := W - \\alpha \\frac{\\partial}{\\partial W} \\, \\frac{1}{2m} \\textstyle\\sum_{i=1}^m (W(x_i)-y_i)^2 \\)   \\( W := W - \\alpha \\frac{1}{2m} \\, \\textstyle\\sum_{i=1}^m 2(W(x_i)-y_i)X_i \\)   \\( W := W - \\alpha \\frac{1}{m} \\, \\textstyle\\sum_{i=1}^m (W(x_i)-y_i)X_i \\)   \\( W := W - \\alpha \\frac{\\partial}{\\partial W} \\, cost(W) \\)   위의 식을 보면 W에서 학습률*W에 편미분된 COST를 빼면서 경사 하강을 진행하게 됩니다. 오차의 기울기에 대한 편미분이 0이 되면 오차가 최소인 지점에 도달하며 최적해을 찾을 수 있게 됩니다. 이에 대한 수학적 유도는 다른 형태로 정리해보겠습니다.\nDerivative #  수학적 유도는 다른 자료를 통해 공부를 했습니다. 그래서 몇가지 표현이 틀린데 양해 부탁드리겠습니다. 또한 설명의 순서도 좀 틀린데 일단 제가 다시 정리하기 전까지는 그대로 풀어보도록 하겠습니다.\n함수 f(x)에 대한 미분은 아래와 같습니다. 의미는 x의 변화량이 0으로 수렴할때 y의 변화량이 어떻게 되는지를 구하는 것을 미분이라 합니다. 바꿔말하면 함수 f(x)는 입력 x에 얼마나 민감하게 반응 하는지를 구한다는 이야기입니다.\nDerivative   \\( f\u0026#39;(x) = \\frac{\\Delta f(x)}{\\Delta x} = \\lim\\limits_{\\Delta x \\rightarrow 0 } \\, \\frac{f(x\u0026#43;\\Delta x)-f(x)}{\\Delta x} \\)   고교수학과정입니다만 저처럼 기초가 없으신 분들을 위해 기본 풀이 부터 정리해 놓았습니다.\nDerivative Basic   \\( f(x) = constant -\u0026gt; f\u0026#39;(x) = 0 \\)   \\( f\u0026#39;(x) = e ^ x =\u0026gt; f\u0026#39;(x) = e ^ x \\)   \\( f\u0026#39;(x) = e ^ -x =\u0026gt; f\u0026#39;(x) = -e ^ -x \\)   \\( f\u0026#39;(x) = ax ^ x =\u0026gt; f\u0026#39;(x) = nax ^ {n-1} \\)   \\( f\u0026#39;(x) = ln ^ x =\u0026gt; f\u0026#39;(x) = \\frac{1}{x} \\)   \\( \\frac{1}{x} = x ^ -1 \\)   다시 미분의 문제로 돌아가서 아래와 같을 경우 미분의 의미를 살펴보겠습니다.\n   \\( f(x) = x^2 일 경우 f\u0026#39;(x) = 2 * x^ {2-1} = 2x \\)   \\( f(2) = 2^2 = 4 일 경우 f\u0026#39;(2) = 2*2 = 4 \\)   \\( f(2) = 1^2 = 1 일 경우 f\u0026#39;(2) = 2*1 = 2 \\)   \\( f(2) = 0^2 = 0 일 경우 f\u0026#39;(2) = 2*0 = 0 \\)   즉 x = 2 일때 미분 f(x)는 4의 변화를 가지게 됩니다.\n즉 x = 1 일때 미분 f(x)는 2의 변화를 가지게 됩니다.\n즉 x = 0 일때 미분 f(x)는 0의 변화를 가지게 됩니다.\n즉 x의 한점에서 y의 변화량을 통해 위의 x^2이 Cost라 가정하다고 반복한다면 Cost가 최저인 점을 구할 수 있습니다. 즉 Cost가 최소가 되는 최적해를 구할 수 있게 됩니다.\n Practice 1  \\( f(x) = 3x^2 \u0026#43; e^x \u0026#43; 7 의 f\u0026#39;(x) ? \\)   \\( = 3*2*x^{2-1} \u0026#43; e^x \u0026#43; 0 = 6x \u0026#43; e^x \\)  Practice 2  \\( f(x) = lnx \u0026#43; \\frac{1}{x} 의 f\u0026#39;(x) ? \\)   \\( = \\frac{1}{x} - \\frac{1}{x^2} \\)   Partial Derivative 다음은 입력변수가 하나 이상인 다변수 함수에서 사용하는 편미분에 대해 살펴 보겠습니다. 다변수 함수에서는 미분하고자 하는 변수 하나를 제외한 나머지 변수들은 상수로 취급하고 해당 변수를 미분하는 것을 의미합니다.\n Practice 1  \\( f(x,y) = 2x \u0026#43; 3xy \u0026#43; y^3 \\space 변수 \\space x에 \\space 대해 \\space 편미분 \\)   \\( = \\frac{\\partial f(x,y)}{\\partial x} = \\frac{\\partial(2x\u0026#43;3xy\u0026#43;y^3)}{\\partial x} \\)   \\( = \\frac{\\partial 2x}{\\partial x} \u0026#43; \\frac{\\partial 3xy}{\\partial x} \u0026#43; \\frac{\\partial y^3}{\\partial x} \\)   \\( = 2 \u0026#43; 3y \u0026#43; 0 \\)   \\( = 2 \u0026#43; 3y \\)   \\( f(x,y) = 2x \u0026#43; 3xy \u0026#43; y^3 \\space 변수 \\space y에 \\space 대해 \\space 편미분 \\)   \\( = \\frac{\\partial f(x,y)}{\\partial y} = \\frac{\\partial(2x\u0026#43;3xy\u0026#43;y^3)}{\\partial y} \\)   \\( = \\frac{\\partial 2x}{\\partial y} \u0026#43; \\frac{\\partial 3xy}{\\partial y} \u0026#43; \\frac{\\partial y^3}{\\partial y} \\)   \\( = 0 \u0026#43; 3x \u0026#43; 3y^2 \\)   \\( = 3x \u0026#43; 3y^2 \\)   Chain Rule / Product Rule 여러 함수로 구성된 합성 함수를 미분하기 위한 방법으로 Chain Rule이 있습니다. 여러 함수를 결합된 함수 중 특정 함수를 치환하여 약분 개념을 적용하여 미분하는 방식입니다. 두 함수가 곱해져 있는 형태의 미분은 단순 미분의 곱이 아니며 Product Rule이 성립합니다.\n Chain rule  \\( \\frac{\\partial f}{\\partial x} = \\frac{\\partial f}{\\partial t} \\circ \\frac{\\partial t}{\\partial x} \\)  Product rule  \\( \\frac{\\partial}{\\partial x}[f(x)g(x)]=f(x)g\u0026#39;(x)\u0026#43;f\u0026#39;(x)g(x) \\)  Practice 1  \\( f(x) = e ^ {3x^2} \\space \\space \\space e^t , \\space t = 3x^2 \\)   \\( \\frac{\\partial f}{\\partial x} = \\frac{\\partial f}{\\partial t} \\circ \\frac{\\partial t}{\\partial x} = \\frac{\\partial (e^t)}{\\partial t} \\circ \\frac{\\partial (3x^2)}{\\partial x} = (e^t)(6x) = (e^{3x^2})(6x) = 6xe^{3x2} \\)   \\( f(x) = e^{-x} \\space \\space \\space e^t , \\space t = -x \\)  Practice 2  \\( \\frac{\\partial f}{\\partial x} = \\frac{\\partial f}{\\partial t} \\circ \\frac{\\partial t}{\\partial x} = \\frac{\\partial (e^t)}{\\partial t} \\circ \\frac{\\partial (-x)}{\\partial x} = (e^t)(-1) = (e^{-x})(-1) = -e^{-x} \\)  Practice 3  \\( f(x) = 3xe^x \\)   \\( \\frac{\\partial}{\\partial x}(3xe^x) = 3 \\Big( \\frac{\\partial}{\\partial x}(e^x x) \\Big) \\)   \\( Product \\space Rule을 \\space 적용 \\space \\frac{\\partial}{\\partial x}(u v) = v \\frac{\\partial u}{\\partial x} \u0026#43; u \\frac{\\partial v}{\\partial x} \\space 다음으로 치환 \\space u = e^x \\space v = x \\)   \\( 3 \\Big( x \\frac{\\partial}{\\partial x}(e^x) \u0026#43; e^x \\frac {\\partial}{\\partial x}(x) \\Big) \\)   \\( Chain \\space Rule을 \\space 적용 \\space \\frac{\\partial}{\\partial x}(e^x) = \\frac {\\partial e^u}{\\partial u} \\frac{\\partial u}{\\partial x} \\space 다음으로 \\space 치환 \\space u = x, \\space \\frac{\\partial}{\\partial u}(e^u)=e^u \\)   \\( = 3 \\Big( x e^x \\frac{\\partial}{\\partial x}(x) \u0026#43; e^x \\frac{\\partial}{\\partial x}(x) \\Big) \\)   \\( = 3 \\Big( x e^x 1 \u0026#43; e^x \\frac{\\partial}{\\partial x}(x) \\Big) \\)   \\( = 3 \\Big( x e^x \u0026#43; e^x 1 \\Big) \\)   \\( = 3 ( x e^x \u0026#43; e^x ) \\)   \\( = 3 e^x( x \u0026#43; 1 ) \\)   Loss Function #  미분의 매력에 흠뻑 빠지셨다면 이제 다시 원점으로 돌아가서 Linear Regression에 있어 Loss Function에 대해 이야기해보겠습니다. Linear Regression은 실측되는 데이터와 이를 표현하는 직선의 방정식 f(x) = wx+b의 error가 최소가 되어야 합니다. 즉 Error가 최소가 되는 W,B를 연속적으로 탐색하는 과정에서 이를 측정하기 위해 사용되는 것이 손실함수입니다.\n  Loss Function  \\( Loss Funtion = \\frac{(t_1-y_1)^2 \u0026#43; (t_2-y_2)^2 \u0026#43; ... \u0026#43; (t_n-y_n)^2}{n} \\)   \\( = \\frac{[t_1-(Wx_1\u0026#43;b)]^2 \u0026#43; [t_2-(Wx_2\u0026#43;b)]^2 \u0026#43; ... \u0026#43; [t_n-(Wx_n\u0026#43;b)]^2}{n} \\)   \\( = \\frac{1}{n} \\, \\displaystyle\\sum_{i=1}^n \\, [t_i-(Wx_i\u0026#43;b)]^2 \\)    Gradient Descent 알고리즘도 다시 보겠습니다. 원 기울기에서 학습률*미분만큼을 감소시키며 기울기가 0이 되는 지점 즉 오차가 최소화되는 지점으로 진행하기 위한 수식임을 알 수 있습니다.\n Gradient Descent  \\( W := W - \\alpha \\frac{\\partial}{\\partial W} \\, \\frac{1}{2m} \\textstyle\\sum_{i=1}^m (W(x_i)-y_i)^2 \\)   \\( W := W - \\alpha \\frac{1}{2m} \\, \\textstyle\\sum_{i=1}^m 2(W(x_i)-y_i)X_i \\)   \\( W := W - \\alpha \\frac{1}{m} \\, \\textstyle\\sum_{i=1}^m (W(x_i)-y_i)X_i \\)   \\( W := W - \\alpha \\frac{\\partial}{\\partial W} \\, cost(W) \\)   \\( b := b - \\alpha \\frac{\\partial}{\\partial b} \\, cost(b) \\)   여기서 학습률은 최적해를 향한 진행 폭을 결정하게 됩니다. 작게 잡으면 성능이 저하되고 크게 잡으면 학습이 잘 진행되지 않을 수 있습니다.\n  Learning Rate  \\( W = W - \\alpha \\, \\frac{\\partial E(W,b)}{\\partial W} \\)    이론적으로 Convex Function이라면 가장 잘 최적해를 찾을 수 있습니다. 하지만 문제에 따라 Convex가 아니라면 Parameter에 따라 적절치 위치에서 학습이 종료될 수도 있습니다.\n Dot Product #  Linear Regression 문제에 혜성처럼 행렬이 등장합니다. 다음과 같은 방정식에서 뭐든 요소들의 오차들은 행렬곱을 통해 한번에 계산될 수 있습니다.\n Dot Product  \\( x_1 * W \u0026#43; b_1 = y_1 \\)   \\( x_2 * W \u0026#43; b_2 = y_2 \\)   \\( x_3 * W \u0026#43; b_3 = y_3 \\)   \\( x_4 * W \u0026#43; b_4 = y_4 \\)   \\( x_5 * W \u0026#43; b_5 = y_5 \\)  행렬의 곱으로 전환  \\( \\begin{pmatrix} x_1 \\\\ x_2 \\\\ x_3 \\\\ x_4 \\\\ x_5 \\end{pmatrix} \\circ (W) \u0026#43; b = \\begin{pmatrix} y_1 \\\\ y_2 \\\\ y_3 \\\\ y_4 \\\\ y_5 \\end{pmatrix} \\)   \\( X \\circ W \u0026#43; b = Y \\)    Multi Variable Dot Product  \\( \\begin{pmatrix} x_1 \\\\ x_2 \\\\ x_3 \\\\ x_4 \\\\ x_5 \\end{pmatrix} \\circ \\begin{pmatrix} w_1 \\\\ w_2 \\\\ w_3 \\end{pmatrix} \u0026#43; b = \\begin{pmatrix} y_1 \\\\ y_2 \\\\ y_3 \\\\ y_4 \\\\ y_5 \\end{pmatrix} \\)   \\( X \\circ W \u0026#43; b = Y \\)   Logistic Regression #  행렬의 곱까지 잘 왔다면 이제 Regression을 통해 처리된 결과를 Classification 해야될 차례입니다. 분류의 문제에 있어서 Linear Regression은 선형의 수치형 값을 가지게 됩니다. 하지만 분류의 문제에 있어서는 선택의 문제로 표현되어야 합니다. 즉 Linear한 결과를 Logistic Regression을 통해 특정 값으로 한정하고 이를 Decision Boundary를 통해 분류의 결과로 대치할 수 있는 필요가 생깁니다.\n 분류의 문제를 위해 지수 함수  \\( e^x \\)  를  \\( e^{-x} \\)  로 전환 후  \\( \\frac{1}{1 \u0026#43; e^{-x}} \\)  에 대입하여 x의 좌측으로 진행할수로  \\( \\infty \\)  에 가까워지며 0에 수렴하게되고 x의 우측으로 진행하게 될수록 0에 수렴하면서 1에 가까워지는 결과가 나오게 된다.\n   Sigmoid  \\( Z = Wx \u0026#43; b \\)   \\( y = \\frac {1}{1\u0026#43;e^{-(Wx\u0026#43;b)}} \\)   \\( y = sigmoid(Z) = \\sigma (z) = \\frac{1}{1\u0026#43;e^-z} \\)   Logistic Regression의 Cost Function은 y = 1 일때와 y = 0 일때로 구분할 수 있는데 y = 1 일때는  \\( \\log(h(x)) \\)  의 역  \\( -\\log(h(x)) \\)  을 취해 0으로 근접할 수록 오차가  \\( \\infty \\)  에 수렴하게 됩니다. 반대로 y = 0 일때는  \\( \\log(1 - h(x)) \\)  와 같이 1에서 차감하여 1에 근접할 수록 오차가  \\( \\infty \\)  에 수렴하게 합니다. 이 두 식을 합하면 Logistic Regression의 Convex한 Cost Funtion이 되게 됩니다.\n  Cross-Entropy 유도의 또다른 설명은 다음과 같습니다.\n 하나의 입력 x에 대해 출력이 1일 확률을 y로 정의. y는 0 또는 1일임으로 y = sigmodi(Wx+b)로 나타낼 수 있습니다.  \\( p(C=1|x) = y = sigmoid(Wx\u0026#43;b) \\)  입력 x에 대해 출력이 0일 확률은 1이 나타날 확률의 나머지임으로 1-y 입니다.  \\( p(C=0|x) = 1 - p(C=1|x) = 1 - y \\)  확률 변수 C는 0 또는 1 이외에는 존재하지 않음으로 베르누이 시행을 전제로 하며 베르누이 분포의 확률질량함수(PMF)는 다음과 같이 정의됨  \\( p(C=p|x) = y^p ( 1 - y )^{1-P} \\)   \\( Likelyhood (W,b) = \\displaystyle\\prod_{i=1}^n p(C=p_i|x_i) = \\displaystyle\\prod_{i=1}^n y_i^{p_i} (1-y_i)^{1-p_i} \\)  이를 Log 변환을 통해 Convex의 형태와 극점의 위치를 유지하며 곱을 선형의 조합 꼴로 풀 수 있도록 변환한다.\n \\( E(W,b) = - \\log L(W,b) = -\\displaystyle\\sum_{i=1}^n \\lbrace t_i \\textstyle\\log y_i \u0026#43; (1-p_i) \\log(1-y_i) \\rbrace \\)    Logistic Regression Cross Entropy  \\( y = \\frac{1}{1\u0026#43;e^{-(Wx\u0026#43;b)}} , \\space p_i = 0 \\space or \\space 1 \\)   \\( E(W,b) = - \\, \\displaystyle\\sum_{i=1}^n \\, \\lbrace p_i \\, \\log y_i \u0026#43; (1-p_i) \\log (1-y_i) \\rbrace \\)     \u0026ldquo;Regression toward the mean\u0026rdquo;, Sir Francis Galton (1822~1911) \u0026#x21a9;\u0026#xfe0e;\n 굴곡진 인생의 정답을 찾아가는 험난한 여정 \u0026#x21a9;\u0026#xfe0e;\n   "});index.add({'id':16,'href':'/docs/documents/deeplearning/tensorflow/','title':"Tensorflow",'section':"Deep Learning",'content':"Tensor Flow #   Introduction #  Tensor Flow 는 2015년 구글에서 공개한 머신러닝 라이브러리 입니다. 일반인들도 Python을 통해 머신러닝 프로그램을 작성할 수 있습니다. Keras는 Tensor Flow와 같은 딥러닝 라이브러리를 Backend로 사용하여 쉽게 신경망 모델을 구성할 수 있는 라이브러리입니다. 이런 Tensor Flow나 Keras는 Jupyter Notebook이라는 오픈 소스 웹 어플리케이션으로 실행하고 공유해볼 수 있는데 구글에서 무료로 제공하고 있는 Colab이라는 서비스를 통해 누구나가 쉽게 사용할 수 있게 되었습니다.\n mermaid.initialize({ \"flowchart\": { \"useMaxWidth\":true }, \"theme\": \"default\" } ) graph LR A((X:Tensor))--|Edge|C((+:Node))--|Edge|D((X+Y:Tensor)) B((Y:Tensor))--|Edge|C style A fill:#ffffff,stroke:#000000,stroke-width:1px style B fill:#ffffff,stroke:#000000,stroke-width:1px style C fill:#ffffff,stroke:#000000,stroke-width:1px style D fill:#ffffff,stroke:#000000,stroke-width:1px 현재 작성중입니다. "});index.add({'id':17,'href':'/docs/documents/business/','title':"Business",'section':"Documents",'content':"Business #     Supply Chain Management   Description   "});index.add({'id':18,'href':'/docs/documents/english/','title':"English",'section':"Documents",'content':"English #     English   English Expression from Internet   Seulsam   English Expression from SeulSam   "});index.add({'id':19,'href':'/docs/documents/english/engweb/','title':"English",'section':"English",'content':"English Expression Diary #   여기저기서 들었던 표현들을 정리해보겠습니다.\nTry telling me English is easy. #  \u0026lsquo;Try me\u0026rsquo;는 \u0026lsquo;How you dare\u0026rsquo;의 뜻으로 이 문장은 sarcastic 하고 twisted된 문장입니다. 그래서 해석은 \u0026ldquo;어디 한번 영어가 쉽다고 말해보시지?\u0026rdquo; 정도 되겠습니다.\nEase into #  천천히 들듯이 적응하다는 의미입니다.\nFeel insecure about someone\u0026rsquo;s appearance #  외모에 자신감이 없다는 뜻입니다.\nElbow me in the rib #  팔꿈치로 가격하는 건지를 놓고 고민했었습니다. 옆구리를 쿡쿡 찌른다는 의미입니다. 왜 갈비뼈였을까요?\nBe good at #  \u0026ldquo;나 영어 잘 못해\u0026rdquo; 아주 자주 쓰는 표현인데 I can\u0026rsquo;t speak english well 정도만 쓰다가 I\u0026rsquo;m not good at English. 도 섞어쓰고 있습니다.\nStay safe #  항상 조심해 정도? 자매품 Be Safe. 조심해. 잘지내. 정도도 있습니다. 코로나 시대에 걸맞는 표현이죠.\nI don\u0026rsquo;t want your help to go in vain. #  in vain이 의미를 뒤집는걸 몰랐습니다. 괜히 쓸데없는 짓 하지마시라는 얘기더군요. \u0026ldquo;선생님께서 저 도와주신다는게 괜한 짓이 되는걸 원치않아요.\u0026rdquo; 인데 실제로는 \u0026ldquo;괜한짓 하지 않으셔도 되요\u0026rdquo;?\nThe mortifying ordeal of being known. #  표현이 좋아서 적었습니다. 의역하면 \u0026ldquo;알려졌다는 수치스러운 그 고통\u0026quot;이죠. Celebrities 한테 보내는 내용 같네요.\nThat\u0026rsquo;s so cheesy! #  오글거린다는 표현을 이렇게 쓰더군요.\nHe is so lucky his face does it for him when he has an attitude. #  \u0026ldquo;약간 거들먹 거려도 그의 얼굴이 받쳐주니 참 행운아네\u0026rdquo; 정도네요. My face do something!\nWhy would you do that?! #  의미가 두가지로 갈립니다. \u0026ldquo;왜 그럴려고 하는데?\u0026ldquo;와 \u0026ldquo;왜 그랬니\u0026rdquo; 정도입니다.\nGod complex #  신 컴플렉스이네요. 적절한 단어가 없었습니다. 자신이 신 또는 메시아라고 믿는 과대망상?\nShe is so catch. #  음 튕긴다는 표현이였습니다. \u0026ldquo;그녀는 철벽녀야\u0026rdquo; 정도.\nThe ramen will get mushy and soggy. #  \u0026ldquo;라면 불겠다\u0026quot;는 표현을 고민해본적이 없었는데 이거더군요.\nMirror selfie #  거울찍는 전신상 같은게 Mirror selfie더군요. 인스타그램용?\nShowing off #  생색낸다는 표현이네요.\nBe possessed by a ghost #  귀신들렸다는 표현입니다. Obsessed랑 차이가 뭔지 몰랐습니다. Obsessed는 집착이네요.\nhigh-maintenance #  손이 많이 간다는 표현을 이렇게 쓰더군요.\nI\u0026rsquo;m practicing passive listening while I study the bible. #  Try me 선생님 작품입니다. 성경을 공부하며 흘려듣기로 듣기 연습을 한다는 소리입니다.\nKeep your eyes peeled for my message coming soon. #  역시 Try me 선생님 작품입니다. 내가 답장할때까지 눈 똑바로 뜨고 잘보고 있어.\nCheeky #  아주 밉지 않은 얄이운걸 나타냅니다.\nBath dipper or pail #  손잡이 달린 바가지를 나타내네요.\nKeep your bangs #  Bangs가 앞머리를 뜻합니다. 앞머리 자르지 마란 얘기네요.\nFolded the paper star #  종이별 접는다는 이야기 입니다.\nSpirit animal #  한참을 고민한 단어입니다. 결론은 저희는 이런 단어가 없습니다. 대표 영혼? 롤모델?\nTo call on #  선생님들이 학생들한테 질문을 묻기 위해 부르는걸 이야기 하네요.\nHis research put forth 5 hypotheses. #  Put forth가 가설을 제시하다란 뜻이였네요. 그의 연구는 다섯가지의 가설의 제시한다.\nWhat are some cheesy pick-up lines in Korean? #  한국어로 오글거리는 작업멘트 알려주세요.\nSo the most I will do is send a message #  \u0026ldquo;The most I will do\u0026quot;라는게 사람 잡는 의미입니다. \u0026ldquo;그래서 내가 할 수 있는 것 중에 최고는 그냥 메세지를 보내는 겁니다\u0026quot;란 문장이다. 그 답글도 굉장히 훌륭했다. (Perfect!)\n 답글내용 ...  \u0026ldquo;The most I will do\u0026rdquo; does not mean that this is what I will do first, but rather this is the absolute maximum that I will do. Like If you say \u0026ldquo;the most I will do is send a message\u0026rdquo; then you\u0026rsquo;ll send a message but not more than that, such as making a call or meeting in person. Therefore, I think the translation should be \u0026ldquo;메세지를 보내는 것 이상은 하지 않을 거예요\u0026rdquo; \u0026ldquo;I won\u0026rsquo;t do more than just sending a mesaage\u0026rdquo;    Piggyback ride #  어부바를 궁금해들 하더군요.\nTo knead rice #  쌀을 빚다는거 어려웠습니다.\nThe power of someone\u0026rsquo;s glasses #  안경 도수 였습니다.\nWhat\u0026rsquo;s with you #  너 왜그러니?\n‎A smile curves up his lips #  그의 입가에 미소가 번졌다. 해석이 좋네요. 이걸 미소가 지으니 입꼬리가 올라갔다라고 번역했더랬습니다.\nThis cleanser is a splurge #  이 클린저는 돈낭비입니다.\nBullshitting #  지랄이라는 의미네요.\nAbbreation Form in messanger #  TY : Thank you\nYW : You\u0026rsquo;re welcome\nTTYL : Talk to you later.\nK : Okay.\nSUP : Wat\u0026rsquo;s UP?\nIK : I know.\nDon\u0026rsquo;t tread on me #  Tread me는 다른 의미라고 봐야될거 같습니다. Don\u0026rsquo;t tread on me는 \u0026ldquo;Gadsden flag\u0026quot;라 불리며 뭔가 \u0026lsquo;날 건들면 죽어\u0026rsquo;와 같은 상징적 의미를 가지고 있고 Tread me는 그냥 내발을 밟고 지나간다는 의미더군요.\nOpposititis #  우리 Try me 선생님 작품입니다. 정말 누군지 뵙고십네요. 완전 Huge Fan입니다. 뜻은 무엇과 달라지기위해 완전히 그반대로 행동하는 사람 또는 주의를 의미합니다. Opposit It is의 의미인데 약간 현상에 대한 의미 같습니다. \u0026lsquo;청개구리\u0026rsquo; 느낌인데 과거 경험에 동기가 있고 달라지고자 하는 목적성이 있다는 점에서 의미가 살짝 다른걸로 판단했습니다.\nComedic gold #  한참 고민했던 단어입니다. 신조어 같은데 썰렁개그+허무개그+아재개그+엽기개그 상황들을 총칭하는 것 같더군요. 아마도 비영어권 친구가 이해를 못했던 것 같습니다. \u0026ldquo;The bad you are in right now is comedic gold.\u0026rdquo; 였습니다. 저처럼 이해를 못했던 사람이 있었나 보네요.\nAn unearned win / the game by default #  부전승이라는 의미였습니다. \u0026lsquo;부전승으로 할사람 한명 정하자\u0026rsquo;라고 할때 Let\u0026rsquo;s decide one who will get the game by default. 또는 Let\u0026rsquo;s decide one who will get an unearned win. 정도 하면 대강은 뜻은 통할 것 같습니다.\nLike I used to #  \u0026lsquo;예전 같은\u0026rsquo; 뜻입니다. Used to 의 익숙해졌다와는 조금 다른 의미입니다. 또 다른 형태로 \u0026lsquo;예전에 했던것 처럼\u0026rsquo;의 의미도 있습니다. \u0026lsquo;예전 같이\u0026rsquo;와 어떻게 다른지는 깊게 고민해보지 않았습니다. (같은말인가?)\nFor the life of me #  \u0026ldquo;아무리 생각해봐도\u0026quot;라는 뜻입니다. I can\u0026rsquo;t remember her name for the life of me. \u0026lsquo;아무리 생각해봐도 그녀의 이름이 기억나지 않는다\u0026rsquo;라는 뜻이네요. 정말 아무리 생각해봐도 무슨 소리였는지 알지 못했습니다.\nShoot the breeze #  수다를 떤다는 의미가 있습니다.\nShoot one\u0026rsquo;s mouth off #  쏜다는 의미가 아닙니다. 입을 쏘는건가 생각했습니다. \u0026lsquo;주절거린다\u0026rsquo;,\u0026lsquo;지껄인다\u0026rsquo;는 표현입니다. It\u0026rsquo;s just like Richard to go shooting his mouth off about other people\u0026rsquo;s business. 다른사람들 일에 대해 지껄이고 다니는건 리처드인거 같다는 표현입니다. 비속어네요.\nLet\u0026rsquo;s live while doing things we like #  우리가 좋아하는 것을 하면서 살자라는 의미입니다. 욜로네요. You only live once.\nI\u0026rsquo;m good #  좋다는 뜻이 아니랍니다. \u0026ldquo;난 됐어\u0026quot;라는 의미라네요.\nDownward spiral #  아래로 향하는 나선 계단. 한국어로는 \u0026lsquo;악순환\u0026rsquo;으로 보는게 좋을 것 같네요.\nGwak, Blank expression #  Gwaking은 멍한, 얼빠진 표정을 짓는걸 의미합니다. 일반적인 표현으로는 Blank Expression 도 있더군요. 질문은 \u0026ldquo;얼빠진 표정을 하는 걸 보니까 기억 안나는 모양이네\u0026rdquo; 였습니다. (I judge from) seeing that you make a blank expression, it seems that you coundn\u0026rsquo;t remember. 정도로 해보았습니다.\nCome up with it #  마련하다. Can you come up with a plan by tomorrow? 내일까지 계획을 마련할 수 있니?\nPut together #  준비하다. Could you put together a presentation tomorrow? 내일까지 프레젠테이션 준비해줄 수 있나요?\nDoes Friday work for you? #  금요일날 너 시간돼냐?\nI don\u0026rsquo;t think my laptop is working #  헐? 내 노트북이 작동하지 않는거 같아요. 와. 이거 적응 안되는 문장이네요.\nKeep me posted #  계속 나에게 알려줘. I\u0026rsquo;ll keep you posted. 너한테 계속 알려줄께.\nCan you move up the meeing? #  일정을 댕겨줄 수 있어?\nLet\u0026rsquo;s move on to the topic. #  다음 주제로 넘어가자.\nLet\u0026rsquo;s call it a day and pick this up tomorrow #  오늘은 여기까지 하고 내일 이어서 계속하자. 와\u0026hellip;\nPlease let me know at your earliest convenience. #  오오\u0026hellip; 문장이 아름답다.\nCome over to my place #  우리 집에 놀러오라는 표현이네요.\nPull shit on me #  개수작 부린다는 뜻도 있네요.\nThe values of person #  Value가 가치관이라는 뜻도 있습니다.\nOne of the three dog days #  외국에도 복날이 있는지 처음 알았습니다. 거기다가 Dog이라는 표현까지도 쓰더군요.\nMaintain composure #  평정심을 유지한다는 의미입니다. 평정심이 Composure네요.\n확실히 너무 단기간에 집중적으로 봐서 그런지 요즘 글은 흥미로운게 없어보입니다. 여기까지만 정리하고 영어공부를 할 다른 방법을 찾아봐야겠습니다. "});index.add({'id':20,'href':'/docs/documents/english/seulsam/','title':"Seulsam",'section':"English",'content':"English Expression Diary - 구슬쌤 자신감 팍팍 영어 #   유튜버 구슬쌤이 자신감 팍팍 영어를 정리했습니다.\n구슬쌤의 자신감 팍팍 영어\nI find it doable #  할만해\nI find it challenging #  힘들긴하지만 해볼만해\nDid you eat at all? #  뭐 좀 먹었니?\nIf you need anthing at all, please let me know. #  뭐라도 필요하시면 알려주세요. T..T 표현 감동입니다.\nI\u0026rsquo;m in the middle of a metting. Can I send back in just a minute? #  한참 회의 중인데 좀있다 보내되 될까?\nI\u0026rsquo;m at work. #  난 근무중이야.\nYou mad my day. #  덕분에 기분 좋아.\nYou don\u0026rsquo;t appreciate good man. #  좋은 남자의 진가를 몰라보내.\nI appreciate it. Of course #  네 덕분이야. 천만에요. (?)\nThank you. No, thank YOU. #  고마워요. 천만에요.\nHow old do you think she is? I think.. she\u0026rsquo;s 30-ish. #  그 여자가 몇살인거 같니. 내 생각엔 대략 30살정도?\n"});index.add({'id':21,'href':'/docs/documents/gamedev/','title':"Game Dev",'section':"Documents",'content':"Game Dev #     RUST   Rust Language   C   Description   C\u0026#43;\u0026#43;   Description   "});index.add({'id':22,'href':'/posts/201019/','title':"Jazz",'section':"Blog",'content':" 매일 다니는 서울역인데 아래에 링크한 영상처럼 이쁜 줄은 오늘 처음 알았네요. 유튜브 iframe 링크에는 저작권 문제가 있다는 것도 역시 오늘 처음 알았습니다. 유튜브에 공유하는 기능은 있으나 침해의 소지가 있다 없다 등에 대한 의견은 매우 분분한 상황같습니다. 하여 아래 링크를 달아 놓으니 필요하시면 직접 가서 들으시는 걸로.\n몇가지 제 개인적인 생각 좀 정리해보겠습니다. 정적 사이트에 대한 고민이 영어로 번져서 한동안 일진광풍처럼 제 머리 속을 휩쓸고 지나갔습니다. 시작은 영문사이트를 같이 유지할 수 있을까에 대한 고민이였는데 일단 현재로서는 역부족이라고 판단해야될 것 같습니다. 둘을 같이 제작하는게 시간이 심하게 소요되네요.\n둘째 해보고 싶은 것도, 공부하고 싶은 것도 너무 많은데 좀 길게 늘려서 안배를 잘 하지 않으면 번아웃 되게끔 제 욕심이 많은 것 같습니다. 좀 차근 차근 가보도록 다시 마음을 다잡아야 하겠습니다.\n셋째 좀 효과적이고 집중적인 방법을 찾아봐야겠습니다. 여러가지 측면에서 시간 소모도 좀 많고 집중도도 낮습니다. 무언가 분산시켜서 끌고가기 보다는 빠른게 집중해서 처리해려고 하는데요. 흠 하다보면 정신이 없네요.\n항상 늘 문제는 제 자신과의 싸움이네요. \u0026ldquo;불안은 영혼을 잠식한다\u0026rdquo; 누가 지은 제목인지 모르겠지만 항상 되뇌이게 만드는 말입니다. \u0026ldquo;불안은 영혼을 잠식한다\u0026hellip;\u0026rdquo;\nJazz Music\n  "});index.add({'id':23,'href':'/posts/201016/','title':"Eglish Study",'section':"Blog",'content':" 요즘은 어학으로 매진하고 있습니다. English Section도 새로 열어놓았죠. 집사람이 이상한 사람 보듯 보네요. 영어로 얘기하는걸 두려워 했었는데 아니 사람과 얘기하는걸 그다지 좋아하지 않았는데 막 영어로 답글 달고 있습니다. 뭔가 영어에 대한 잠금장치 하나가 풀어진 느낌이랄까요. 머리 속에서 영어가 콸콸 쏟아지려는 느낌입니다. 이 기세를 유지하고 싶어서 좀 내버려 두었더니 끝을 모르고 넘어가고 있네요.\n  "});index.add({'id':24,'href':'/posts/201012/','title':"Mysterious Mathmathical",'section':"Blog",'content':" 해도 해도 기억 되지 않는 수학에는 어떠한 신비가 있는 걸까요? Deeplearning 3회차 보는 중인데 그냥 딱 보면 이해되었으면 좋겠습니다. 수학적 유도 필요는 없다고 하는데 모르고는 잘 넘어가지지가 않아서 계속 보는데 봐도 봐도 완전 새로운 이러는 설레임은 도대체 뭐죠?\n확실히 떨어지는 집중도를 잡기위한 고민을 좀 해보아야 겠습니다. 최근 계속 무리해서 뭔가를 해보려고 시도를 하지만 확실히 집중도는 떨어지고 책상머리에 앉아서 딴짓만 하는 자신을 발견하네요. 지속적으로 높은 집중도를 가지고 무엇가를 성취해나가는 사람들의 비결은 무엇일까요? 다시 집중해야겠습니다.\n  "});index.add({'id':25,'href':'/posts/201010/','title':"Opentutorial",'section':"Blog",'content':" 인터넷에는 꽤 많은 정보들이 있습니다만. 어느 선을 넘어가게되면 분명 무료의 한계를 겪게 됩니다. 당연히 살아가는 생활인으로서 컨텐츠 제작자도 생활인입니다. 모든 인터넷 컨텐츠가 무료라는게 적절하지 않습니다. 하지만 상당한 품질에 왜 유료가 아닌지 모를 컨텐츠들이 있어 가끔 놀라울 따름입니다. 그런 사이트가 있어 감사한 마음으로 소개를 드리고자 합니다.\n오픈튜토리얼스\n안에는 다른 많은 수업들이 있는데 저는 egoing이라는 분의 생활코딩을 보면서 상당한 도움을 받았습니다. 정보기술 전반에 걸쳐 굉장히 많은 분야가 상세히 잘 설명되어 있어 정보기술을 처음 접하시는 분들에게 더할 나위 없는 길잡이가 될거라고 생각합니다.\n  "});index.add({'id':26,'href':'/posts/201008/','title':"Principles...",'section':"Blog",'content':" 항상 시작이 어렵네요. 여러가지로 고민을 해보았습니다. 도대체 무엇을 위한 걸까요? 누구를 위한 걸까요? 왜 해야 하는 걸까요? 한참 고민하다가 오히려 이런 것들 때문에 시간만 잡아 먹고 본질을 놓치는 거 아닐가 생각했습니다. 그러다 몇가지로 생각이 모아지게 되었습니다.\n  욕심부리지 말자\n늘 하고 싶은게 많아서 모든걸 잘 해보려다 제풀에 지쳐버렸던 것 같습니다. 투자하는 시간도 노력도 확줄여야 겠다고 생각했습니다.\n  차근 차근 가자\n성격이 급한거 같습니다. 뭔가 다그쳐서 빨리 올라 갈 수 있는게 있고 길게 보아야 할게 있는거 같습니다. 몇몇은 길게 보려고 생각하고 있습니다.\n  빠르게 실행하자\n고민 보다는 실행을 먼저 하려고 생각했습니다. 이를테면 운영체제에 잘 모르는 프로그램들을 설치하는걸 무척 싫어했는데 그냥 부딪히면서 가야겠다고 생각했습니다.\n  나를 위해 하자\n지속적으로 고민했던 부분입니다. 누군가를 대상으로 무언가를 해야한다고 계속 생각했는데 기준을 잘 못잡겠었습니다. 그냥 제 자신의 기준으로 가보겠습니다.\n  경어를 쓰자\n제 자신을 위한다고 해도 개그 욕심이 나도 경어를 쓰기로 생각했습니다. 개그 욕심이 본질을 자꾸 흐리는거 같아요.\n  즐겁게 하자\n막 꽤 고통스럽게 삶을 헌신하듯이 가면 결국 탈이 나더군요. 의미가 없다면 언제든 그만두려고 생각했습니다.\n   다음글  "});index.add({'id':27,'href':'/posts/200928/','title':"Hello World!",'section':"Blog",'content':" 누구나 프로그래밍 언어를 배울때 항상 시작은 \u0026ldquo;Hello World\u0026quot;였지 않았을까요? 시작 하는 화면을 고민하다가 \u0026ldquo;Hello World!\u0026ldquo;를 떠올렸습니다. 그간 제 손을 거쳤던 \u0026ldquo;Hello World\u0026quot;를 쭉 되짚어 보았는데 좀 부끄러워졌네요. 제대로 할 줄 아는게 몇 개 없다고 생각했습니다. 그나마 먹고 살기 위해 손에 달고 있던 몇 개 정도 뿐이였습니다. 나름 꽤 열심히 산다고 살았는데 먹고 살기만 했나 봅니다. 돌이켜보면 이것저것 나름 시도는 많이 해보았는데 꾸준히는 못했던 것 같습니다. 이번에는 좀 꾸준히 끌고 가보자 생각했습니다. 그렇게 조급할 것도 없고 아쉬울 것도 없어서 정말 즐기면서 갈 수 있을 것 같은 기분이네요.\nhelloworldcollection\nASP.NET #  \u0026lt;%= \u0026#34;Hello World!\u0026#34; %\u0026gt;  언제 : 밀레니엄 즈음\u0026hellip;\n이유 : 개인 홈페이지 만든답시고\u0026hellip;\n BASIC #  10 PRINT \u0026#34;Hello World!\u0026#34;  언제 : 중딩시절\u0026hellip;\n이유 : 텍스트 기반 게임 제작한답시고\u0026hellip;\n C (Windows) #  #include \u0026lt;windows.h\u0026gt; int PASCAL WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR CmdLine, int Show) { MessageBox(GetActiveWindw(), \u0026#34;Hello World!\u0026#34;, \u0026#34;Hello Windows\u0026#34;, MB_OK); return 0; }  언제 : 대딩시절\u0026hellip;\n이유 : 윈도우 API 공부한답시고\u0026hellip;\n C# #  class HelloWorld { static void Main() { System.Console.WriteLine(\u0026#34;Hello, World!\u0026#34;); } }  언제 : 2009년 5월\u0026hellip;\n이유 : 모델링 툴 제작한답시고\u0026hellip;\n C++ (.NET CLI) #  using namespace System; void main() { console::WriteLine(\u0026#34;Hello World!\u0026#34;); }  언제 : 2003년 11월\u0026hellip;\n이유 : 이소메트릭 게임 제작한답시고\u0026hellip;\n ColdFusion #  \u0026lt;cfset message = \u0026#34;Hello World!\u0026#34;\u0026gt; \u0026lt;cfoutput\u0026gt; #message# \u0026lt;/cfoutput\u0026gt;  언제 : 석사시절\u0026hellip;\n이유 : 과제한답시고\u0026hellip;\n CommandScript #  echo \u0026#34;Hello World!\u0026#34;  언제 : 가끔\u0026hellip;\n이유 : 파일정리한답시고\u0026hellip;\n CSS #  body:before { content: \u0026#34;Hello World!\u0026#34;; }  언제 : 최근\u0026hellip;\n이유 : Frontend 공부한답시고\u0026hellip;\n Go #  package main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello Wrold!\u0026#34;) }  언제 : 최근\u0026hellip;\n이유 : Backend 공부한답시고\u0026hellip;\n HTML #  \u0026lt;HTML\u0026gt; \u0026lt;HEAD\u0026gt; \u0026lt;TITLE\u0026gt;Hello World!\u0026lt;TITLE\u0026gt; \u0026lt;/HEAD\u0026gt; \u0026lt;BODY\u0026gt; \u0026lt;H1\u0026gt;Hello World!\u0026lt;/H1\u0026gt; \u0026lt;/BODY\u0026gt; \u0026lt;/HTML\u0026gt;  언제 : 최근\u0026hellip;\n이유 : Frontend 공부한답시고\u0026hellip;\n Java #  class HelloWorld { static public void main (String args[]) { System.out.println(\u0026#34;Hello World!\u0026#34;); } }  언제 : 대딩시절\u0026hellip;\n이유 : 학부수업한답시고\u0026hellip;\n JavaScript #  console.log(\u0026#34;Hello World!\u0026#34;)  언제 : 최근\u0026hellip;\n이유 : Frontend 공부한답시고\u0026hellip;\n PHP #  \u0026lt;?php echo \u0026#39;Hello World!\u0026#39;; ?\u0026gt; 언제 : 대딩시절\u0026hellip;\n이유 : 개인 홈페이지 만든답시고\u0026hellip;\n ProC #  #include \u0026lt;stdio.h\u0026gt;EXEC SQL INCLUDE SQLCA; int main() { char hello[15]; char *user = \u0026#34;user\u0026#34;; char *pass = \u0026#34;password\u0026#34;; char *sid = \u0026#34;the_sid\u0026#34;; EXEC SQL CONNECT :user IDENTIFIED BY :password USING :sid; EXEC SQL SELECT \u0026#39;Hello World!\u0026#34; INTO :hello FROM DUAL; printf(\u0026#34;%s\\n\u0026#34;,hello) EXEC SQL COMMIT RELEASE; return 0; }  언제 : 2005년부터 2010년까지\u0026hellip;\n이유 : 먹고 산답시고\u0026hellip;\n Python3 #  print(\u0026#34;Hello World!\u0026#34;)  언제 : 최근\u0026hellip;\n이유 : 딥러닝 공부한답시고\u0026hellip;\n PL/SQL (Oracle) #  begin dbms_output.enable(1000); dbms_output.put_line(\u0026#39;Hello World!\u0026#39;); end;  언제 : 2005년 이후\u0026hellip;\n이유 : 먹고 산답시고\u0026hellip;\n Rust #  fn main () { println!(\u0026#34;Hello World!\u0026#34;); }  언제 : 최근\u0026hellip;\n이유 : Backend 공부한답시고\u0026hellip;\n SQL (Oracle) #  select \u0026#39;Hello World\u0026#39; from dual;  언제 : 2005년 이후\u0026hellip;\n이유 : 먹고 산답시고\u0026hellip;\n Unix Shell #  echo Hello World  언제 : 2005년부터 2010년까지\u0026hellip;\n이유 : 먹고 산답시고\u0026hellip;\n VBScript #  MsgBox \u0026#34;Hello world!\u0026#34; Reference #   [helloworldcollection] : 언어별 Hello World 모음 사이트\n 다음글  "});})();