'use strict';(function(){const indexCfg={encode:false,tokenize:function(str){return str.replace(/[\x00-\x7F]/g,'').split('');}};indexCfg.doc={id:'id',field:['title','content'],store:['title','href','section'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/docs/','title':"Docs",'section':"Home",'content':"  Documents     "});index.add({'id':1,'href':'/docs/documents/projects/','title':"Projects",'section':"Documents",'content':"Projects #     hU-Go-Girl   HUGO (feat Github)를 이용한 정적 웹페이지 생성   "});index.add({'id':2,'href':'/docs/documents/projects/hugogirl/','title':"hU-Go-Girl",'section':"Projects",'content':"hU-Go-Girl #    Introduction #  여러가지를 진행하는 중에 기록이 필요한 상황들이 지속적으로 발생했습니다. 수많은 링크, 다양한 관심, 넘쳐나는 정보. 결국 그 와중에 습득한 내용들을 정리할 장치가 좀 필요했습니다. 또한 언제고 발생할 이직을 위한 포트폴리오나 동적 이력서도 같이 고민 중이 였습니다. 여러가지를 실험할 동적 웹보다는 단순 기록을 위한 정적 웹이 먼저 필요하다고 판단했고 이 프로젝트는 그에 대한 결과물입니다.\n이 과제를 통해 다음과 같은 주제를 다루게 될겁니다.\n Static Web page Hugo Jekyll Github Markdown Buy me a coffee  Static vs Dynamic #  정적웹은 편의점 같은 서비스를 의미합니다. 손님이 들어와서 선택할 수 있는 김밥은 제품으로 출시된 김밥 뿐입니다. 정적웹은 사용자의 요청에 준비된 응답만을 제공합니다.\n mermaid.initialize({ \"flowchart\": { \"useMaxWidth\":true }, \"theme\": \"default\" } ) graph LR A[ 사용자 ]--|요청|B[웹서버] B--|응답|A style A fill:#ffffff,stroke:#000000,stroke-width:1px style B fill:#ffffff,stroke:#000000,stroke-width:1px 동적웹은 요리점 같은 서비스를 의미합니다. 손님이 들어와서 원하는 음식을 주문하면 거기에 맞춰 요리를 제공합니다. 동적웹은 사용자의 요청을 처리하기 위해 좀더 복잡한 별도의 가공을 거치게 됩니다.\ngraph LR D[ 사용자 ]--|요청|F[웹서버]--|프로세싱|G[(DB서버)] G--|응답|F--|응답|D style D fill:#ffffff,stroke:#000000,stroke-width:1px style F fill:#ffffff,stroke:#000000,stroke-width:1px style G fill:#ffffff,stroke:#000000,stroke-width:1px 개인적인 용도로 웹페이지를 구성한다면 그리고 굳이 동적 서비스를 필요로 하지 않는다면 필요 이상의 복잡함을 감내할 필요는 없을 것입니다. 저도 역시 단순 기록의 용도라 지금은 정적웹이 적절한 선택인것 같습니다.\nGithub #  Git은 리눅스 커널의 소스코드 관리를 위해 리누스 토발즈1가 개발한 툴입니다. 공동 개발 상황에서 소스코드의 형상관리는 매우 어렵고 필수적인 요소입니다. 이런 Git을 위한 저장소를 무료로 제공하고 있는 대표적 사이트가 Github이며 이 쪽에서 제공되고 있는 서비스 중에는 웹 호스팅 서비스도 포함되어 있습니다.\n Github 가입 Repository 생성 Github Page 설정 Add a README file 포함 Setting \u0026gt; Github Pages \u0026gt; Source 설정  별다른 설정없이도 위와 같이 진행하였다면 Github가 제공하는 Default README.MD 화일을 자신 계정명이 포함되어 있는 주소에서 확인할 수 있습니다.\nJekyll vs Hugo #  Jekyll은 Github의 창립자2가 Ruby3라는 언어로 만든 정적 웹 생성기입니다. Github 가이드를 따라가다 보면 자연스럽게 Jekyll을 사용 해서 GitHub Page를 만드는 것을 설명하고 있습니다. Jekyll을 사용하면 별도의 빌드 없이 Git Push만으로도 Publish 된다는 특징이 있습니다.\nHugo는 최근 몇 년간 인기가 급상승 중인 구글의 Go로 만들어진 정적 웹 생성기입니다. 가볍고 빠른 속도를 장점으로 하고 있습니다. 이와 유사한 툴로 Hexo도 있었습니다만 사용해보진 못했습니다.4\n세가지 툴을 놓고 고민했보았고 Jekyll로 한번 Hugo로 한번 테스트 해본 후 저의 최종적인 선택은 Hugo였습니다. Jekyll이 디자인적으로나 기능적으로 완성도 높은 테마가 많았고 Github와의 연동에서 빌드없이 사용할 수 있다는 점은 저를 끝까지 고민하게 만들었습니다. 하지만 다루기 생소한 Ruby도 문제였지만 포스트가 늘어 날때마다 비례해서 늘어나는 빌드 속도는 나중에 문제가 될듯 보였습니다.5 실험적으로 사이트를 만들때 수시로 빌드하고 로컬로 테스트하게 되는데 페이지가 많아진다면 분명 괴로워지는 시점이 올듯했고 결국 Hugo를 선택하게 되었습니다.\nTheme #  문서와 기록이 주 용도이기 때문에 텍스트 기반에 간결한 테마를 검토했습니다. Jekyll에서는 Just-the-doc 테마를 고민했었고 Hugo에서는 Book 테마를 고민했습니다. Hugo를 사용함으로 자동적으로 Book 테마를 사용하게 되었는데 기존 디자인에서 몇몇 가지를 수정하여 사용하고 있습니다.\nMarkdown #  Markdown은 HTML과 같은 마크업 언어입니다. 마크업 언어라는건 별도 표현을 위한 기술을 의미합니다. 메모장에 아래 처럼 어떤 약속된 문법으로 작성하고 Hugo로 build하게 되면 약속된 HTML의 형태로 변경되게 됩니다.\nMarkdown은 이렇게 **표시**됩니다 Markdown은 이렇게 ~~표시~~됩니다 Markdown은 이렇게 표시됩니다\nMarkdown은 이렇게 표시됩니다\n문법이 쉽고 간단해서 빠르게 익힐 수 있고 글을 쓰는데에만 집중 할 수 있는 장점이 있다고 합니다.6\nBuy Me a Coffee #  선택적인 사항입니다만 최근 개인 블로그에서도 후원을 받을 수 있는 방법들이 소개되고 있습니다. Buy me a coffee라는 사이트인데요 먼저 Paypal에 가입하시고 BMC에도 가입하셔서 연동을 하시게되면 사이트의 방문객이 1$~5$ 정도를 해당 계좌로 송금할 수 있다고 합니다. 한국에서는 Paypal을 이용한 국내 계정간의 금전거래가 불가능한걸로 되어 있습니다.7 왼쪽 커피 아이콘으로 나름 커스터마이징 해서 달아 보았습니다만 저도 아직 기부를 받아 본적이 없어 실제적으로 작동하는지는 확인해보지 못했습니다.\nConclusion #  현재 이 글의 작성 방식은 1) 사용 에디터에 Markdown을 이용해 글을 작성하고 2) Hugo를 사용해 Public 경로로 Build하고 3) Git을 통해 Github에 Push하여 Web으로 올리고 있습니다. (현재는 Publish를 좀더 편안히 할 수 있는 방법을 찾아 보고 있습니다.)\n Reference #   생활코딩 : 버전관리 시스템 생활코딩 : Github  Footnote #    저명하신 키보드 워리어 \u0026#x21a9;\u0026#xfe0e;\n 톰 프레스톤 워너 \u0026#x21a9;\u0026#xfe0e;\n 일본산 \u0026#x21a9;\u0026#xfe0e;\n 비교 자료이지만 개인취향일듯 합니다 \u0026#x21a9;\u0026#xfe0e;\n 이런 내요이 검색되는걸 보면 확실히 문제가 있어보입니다. \u0026#x21a9;\u0026#xfe0e;\n 전 아직 집중을 할 수 없네요. \u0026#x21a9;\u0026#xfe0e;\n 한국 PayPal FAQs \u0026#x21a9;\u0026#xfe0e;\n   "});index.add({'id':3,'href':'/docs/documents/frontend/','title':"Front End",'section':"Documents",'content':"  CSS   Description   HTML   Description   Java Script   Description   Hugo   Description   Markdown   Description   "});index.add({'id':4,'href':'/docs/documents/frontend/markdown/','title':"Markdown",'section':"Front End",'content':"Markdown #   Markdown은 HTML 변환이 가능한 텍스트 기반 경량 마크업 언어입니다. 특수 기호와 문자를 이용해 쉽게 쓰고 읽을 수 있으며 문법이 비교적 쉽고 간단한 것이 특징입니다. 제 경우 익숙해질 수 있다면 글쓰기 자체에 집중할 수 있을 것으로 보여집니다.\nHeader #  마크다운 # H1 크기 제목입니다. ## H2 크기 제목입니다. ### H3 크기 제목입니다. #### H4 크기 제목입니다. ##### H5 크기 제목입니다. ###### H6 크기 제목입니다. 적용결과 H1 크기 제목입니다. H2 크기 제목입니다. H3 크기 제목입니다. H4 크기 제목입니다. H5 크기 제목입니다. H6 크기 제목입니다.  Emphasis #  마크다운 *강조 형태 1* _강조 형태 2_ **강조 형태 3** __강조 형태 4__ ~~강조 형태 5~~ 적용결과 강조 형태 1\n강조 형태 2\n강조 형태 3\n강조 형태 4\n강조 형태 5\n List #  마크다운 1. 순서 리스트 1 2. 순서 리스트 2 3. 순서 리스트 3 - 리스트 1 - 리스트 2 - 리스트 3 - 리스트 1 - 리스트 1-1 - 리스트 1-1-1 - 리스트 2 - 리스트 2-1 - 리스트 2-1-1 - 리스트 3 - 리스트 3-1 - 리스트 3-1-1 적용결과  순서 리스트 1 순서 리스트 2 순서 리스트 3    리스트 1\n  리스트 2\n  리스트 3\n  리스트 1\n 리스트 1-1  리스트 1-1-1      리스트 2\n 리스트 2-1  리스트 2-1-1      리스트 3\n 리스트 3-1  리스트 3-1-1       Blockquotes #  마크다운 \u0026gt; 인용 1 \u0026gt; 인용 2 \u0026gt; 인용 3 \u0026gt; 인용 1 \u0026gt;\u0026gt; 인용 2 \u0026gt;\u0026gt;\u0026gt; 인용 3 탭) 인용 1 탭) 인용 2 탭) 인용 3 적용결과  인용 1\n인용 2\n인용 3\n  인용 1\n 인용 2\n 인용 3\n   탭) 인용 1 탭) 인용 2 탭) 인용 3   Inline code #  마크다운 ```Rust fn main () { println!(\u0026#34;Hello World!\u0026#34;); } ``` \u0026lt;pre\u0026gt;\u0026lt;code\u0026gt; { fn main () { println!(\u0026#34;Hello World!\u0026#34;); } } \u0026lt;/code\u0026gt;\u0026lt;/pre\u0026gt; 적용결과 fn main () { println!(\u0026#34;Hello World!\u0026#34;); }  { fn main () { println!(\"Hello World!\"); } }   Tables #  마크다운 | Header1 | Header2 | Header3 | Header4 | Header5 | | :------ | ------: | :-----: | ------- | ------- | | a | b | c | **d** | ~~e~~ | | f | g | h | i | j | | k | l | m | n | o | 적용결과    Header1 Header2 Header3 Header4 Header5     a b c d e   f g h i j   k l m n o     Checkbox #  마크다운 1. [ ] To-Do 1 2. [x] To-Do 2 - [ ] To-Do 3 - [x] To-Do 4 적용결과  To-Do 1 To-Do 2   To-Do 3 To-Do 4   Hyperlinks #  마크다운 [Prokoptasis](https://prokoptasis.github.io/docs/documents/frontend/markdown/) 적용결과 Prokoptasis Images #  마크다운 ![coffee](../../../../../coffee.jpg) [![coffee](../../../../../coffee.jpg)](https://prokoptasis.github.io/docs/documents/frontend/markdown/) 적용결과  Iframe #  마크다운 \u0026lt;iframe width=\u0026#34;100%\u0026#34; height=\u0026#34;400px\u0026#34; src=\u0026#34;https://www.youtube.com/embed/4Vs25c7dzTQ\u0026#34; frameborder=\u0026#34;0\u0026#34; allow=\u0026#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\u0026#34; allowfullscreen\u0026gt;\u0026lt;/iframe\u0026gt; 적용결과   Etc #  마크다운 라인1 *** 라인2 --- 라인3 ___ 라인4 \u0026lt;hr\u0026gt; 문장 1 \u0026lt;br\u0026gt; 문장 2 (공백3칸) 문장 3 (공백없음) 문장 4 \u0026lt;div align=\u0026#34;center\u0026#34;\u0026gt;가운데 정렬\u0026lt;/div\u0026gt; \u0026lt;span style=\u0026#34;color:red\u0026#34;\u0026gt;빨\u0026lt;/span\u0026gt; \u0026lt;span style=\u0026#34;color:#0055FF\u0026#34;\u0026gt;파\u0026lt;/span\u0026gt; \u0026lt;span style=\u0026#34;color:rgb(21, 250, 16)\u0026#34;\u0026gt;녹\u0026lt;/span\u0026gt; 적용결과 라인1\n 라인2\n 라인3\n 라인4\n 문장 1 문장 2 (공백3칸)\n문장 3 (공백없음) 문장 4\n가운데 정렬 빨 파 녹\n Footnotes #  각주[^1] 각주1\n  각주입니다. \u0026#x21a9;\u0026#xfe0e;\n   "});index.add({'id':5,'href':'/docs/documents/backend/','title':"Back End",'section':"Documents",'content':"  PL/SQL   Description   GO   Description   "});index.add({'id':6,'href':'/docs/documents/devops/','title':"Dev ops",'section':"Documents",'content':"  Oracle   Description   Synology   Description   Ubuntu   Description   Docker   Description   AWS   Description   "});index.add({'id':7,'href':'/docs/documents/deeplearning/','title':"Deep Learning",'section':"Documents",'content':"  Python   Description   Tensorflow   Description   "});index.add({'id':8,'href':'/docs/documents/business/','title':"Business",'section':"Documents",'content':"  Supply Chain Management   Description   "});index.add({'id':9,'href':'/docs/documents/gamedev/','title':"Game Dev",'section':"Documents",'content':"  RUST   Rust Language   C   Description   C\u0026#43;\u0026#43;   Description   "});index.add({'id':10,'href':'/posts/2010081207/','title':"Principles...",'section':"Blog",'content':" 항상 시작이 어렵네요. 여러가지로 고민을 해보았습니다. 도대체 무엇을 위한 걸까요? 누구를 위한 걸까요? 왜 하는 걸까요? 등등. 오히려 이런 것 때문에 시간만 잡아 먹고 본질을 놓치는 건 아닐까요? 그러다가 결국 욕심들을 버리고 몇가지 결론으로 생각이 모아지게 되었습니다.\n 욕심부리지 말자  늘 하고 싶은게 많아서 모든걸 잘 해보려다 제풀에 지쳐버렸던 것 같습니다. 투자하는 시간도 노력도 확줄여야 겠다고 생각했습니다.   차근 차근 가자  성격이 급한거 같습니다. 뭔가 다그쳐서 빨리 올라 갈 수 있는게 있고 길게 보아야 할게 있는거 같습니다. 몇몇은 길게 보려고 생각하고 있습니다.   빠르게 실행하자  고민 보다는 실행을 먼저 하려고 생각했습니다. 이를테면 운영체제에 잘 모르는 프로그램들을 설치하는걸 무척 싫어했는데 그냥 부딪히면서 가야겠다고 생각했습니다.   나를 위해 하자  지속적으로 고민했던 부분입니다. 누군가를 대상으로 무언가를 해야한다고 계속 생각했는데 기준을 잘 못잡겠었습니다. 그냥 제 자신의 기준으로 가보겠습니다.   경어를 쓰자  제 자신을 위한다고 해도 개그 욕심이 나도 경어를 쓰기로 생각했습니다. 개그 욕심이 본질을 자꾸 흐리는거 같아요.   즐겁게 하자  막 꽤 고통스럽게 삶을 헌신하듯이 가면 결국 탈이 나더군요. 의미가 없다면 언제든 그만두려고 생각했습니다.    "});index.add({'id':11,'href':'/posts/2009281207/','title':"Hello World!",'section':"Blog",'content':" 누구나 프로그래밍 언어를 배울때 항상 시작은 \u0026ldquo;Hello World\u0026quot;였지 않았을까요? 시작 하는 화면을 고민하다가 \u0026ldquo;Hello World!\u0026ldquo;를 떠올렸습니다. 그간 제 손을 거쳤던 \u0026ldquo;Hello World\u0026quot;를 쭉 되짚어 보았는데 좀 부끄러워졌네요. 제대로 할 줄 아는게 몇 개 없다고 생각했습니다. 그나마 먹고 살기 위해 손에 달고 있던 몇 개 정도 뿐이였습니다. 나름 꽤 열심히 산다고 살았는데 먹고 살기만 했나 봅니다. 돌이켜보면 이것저것 나름 시도는 많이 해보았는데 꾸준히는 못했던 것 같습니다. 이번에는 좀 꾸준히 끌고 가보자 생각했습니다. 그렇게 조급할 것도 없고 아쉬울 것도 없어서 정말 즐기면서 갈 수 있을 것 같은 기분이네요.\nhelloworldcollection\nASP.NET #  \u0026lt;%= \u0026#34;Hello World!\u0026#34; %\u0026gt;  언제 : 밀레니엄 즈음\u0026hellip;\n이유 : 개인 홈페이지 만든답시고\u0026hellip;\n BASIC #  10 PRINT \u0026#34;Hello World!\u0026#34;  언제 : 중딩시절\u0026hellip;\n이유 : 텍스트 기반 게임 제작한답시고\u0026hellip;\n C (Windows) #  #include \u0026lt;windows.h\u0026gt; int PASCAL WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR CmdLine, int Show) { MessageBox(GetActiveWindw(), \u0026#34;Hello World!\u0026#34;, \u0026#34;Hello Windows\u0026#34;, MB_OK); return 0; }  언제 : 대딩시절\u0026hellip;\n이유 : 윈도우 API 공부한답시고\u0026hellip;\n C# #  class HelloWorld { static void Main() { System.Console.WriteLine(\u0026#34;Hello, World!\u0026#34;); } }  언제 : 2009년 5월\u0026hellip;\n이유 : 모델링 툴 제작한답시고\u0026hellip;\n C++ (.NET CLI) #  using namespace System; void main() { console::WriteLine(\u0026#34;Hello World!\u0026#34;); }  언제 : 2003년 11월\u0026hellip;\n이유 : 이소메트릭 게임 제작한답시고\u0026hellip;\n ColdFusion #  \u0026lt;cfset message = \u0026#34;Hello World!\u0026#34;\u0026gt; \u0026lt;cfoutput\u0026gt; #message# \u0026lt;/cfoutput\u0026gt;  언제 : 석사시절\u0026hellip;\n이유 : 과제한답시고\u0026hellip;\n CommandScript #  echo \u0026#34;Hello World!\u0026#34;  언제 : 가끔\u0026hellip;\n이유 : 파일정리한답시고\u0026hellip;\n CSS #  body:before { content: \u0026#34;Hello World!\u0026#34;; }  언제 : 최근\u0026hellip;\n이유 : Frontend 공부한답시고\u0026hellip;\n Go #  package main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello Wrold!\u0026#34;) }  언제 : 최근\u0026hellip;\n이유 : Backend 공부한답시고\u0026hellip;\n HTML #  \u0026lt;HTML\u0026gt; \u0026lt;HEAD\u0026gt; \u0026lt;TITLE\u0026gt;Hello World!\u0026lt;TITLE\u0026gt; \u0026lt;/HEAD\u0026gt; \u0026lt;BODY\u0026gt; \u0026lt;H1\u0026gt;Hello World!\u0026lt;/H1\u0026gt; \u0026lt;/BODY\u0026gt; \u0026lt;/HTML\u0026gt;  언제 : 최근\u0026hellip;\n이유 : Frontend 공부한답시고\u0026hellip;\n Java #  class HelloWorld { static public void main (String args[]) { System.out.println(\u0026#34;Hello World!\u0026#34;); } }  언제 : 대딩시절\u0026hellip;\n이유 : 학부수업한답시고\u0026hellip;\n JavaScript #  console.log(\u0026#34;Hello World!\u0026#34;)  언제 : 최근\u0026hellip;\n이유 : Frontend 공부한답시고\u0026hellip;\n PHP #  \u0026lt;?php echo \u0026#39;Hello World!\u0026#39;; ?\u0026gt; 언제 : 대딩시절\u0026hellip;\n이유 : 개인 홈페이지 만든답시고\u0026hellip;\n ProC #  #include \u0026lt;stdio.h\u0026gt;EXEC SQL INCLUDE SQLCA; int main() { char hello[15]; char *user = \u0026#34;user\u0026#34;; char *pass = \u0026#34;password\u0026#34;; char *sid = \u0026#34;the_sid\u0026#34;; EXEC SQL CONNECT :user IDENTIFIED BY :password USING :sid; EXEC SQL SELECT \u0026#39;Hello World!\u0026#34; INTO :hello FROM DUAL; printf(\u0026#34;%s\\n\u0026#34;,hello) EXEC SQL COMMIT RELEASE; return 0; }  언제 : 2005년부터 2010년까지\u0026hellip;\n이유 : 먹고 산답시고\u0026hellip;\n Python3 #  print(\u0026#34;Hello World!\u0026#34;)  언제 : 최근\u0026hellip;\n이유 : 딥러닝 공부한답시고\u0026hellip;\n PL/SQL (Oracle) #  begin dbms_output.enable(1000); dbms_output.put_line(\u0026#39;Hello World!\u0026#39;); end;  언제 : 2005년 이후\u0026hellip;\n이유 : 먹고 산답시고\u0026hellip;\n Rust #  fn main () { println!(\u0026#34;Hello World!\u0026#34;); }  언제 : 최근\u0026hellip;\n이유 : Backend 공부한답시고\u0026hellip;\n SQL (Oracle) #  select \u0026#39;Hello World\u0026#39; from dual;  언제 : 2005년 이후\u0026hellip;\n이유 : 먹고 산답시고\u0026hellip;\n Unix Shell #  echo Hello World  언제 : 2005년부터 2010년까지\u0026hellip;\n이유 : 먹고 산답시고\u0026hellip;\n VBScript #  MsgBox \u0026#34;Hello world!\u0026#34; Reference #   [helloworldcollection] : 언어별 Hello World 모음 사이트\n"});})();