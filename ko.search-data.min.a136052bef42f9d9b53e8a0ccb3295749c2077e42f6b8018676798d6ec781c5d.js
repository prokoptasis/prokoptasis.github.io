'use strict';(function(){const indexCfg={encode:false,tokenize:function(str){return str.replace(/[\x00-\x7F]/g,'').split('');}};indexCfg.doc={id:'id',field:['title','content'],store:['title','href','section'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/docs/','title':"Docs",'section':"Home",'content':"  Documents     "});index.add({'id':1,'href':'/docs/documents/projects/','title':"Projects",'section':"Documents",'content':"Projects #     hU-Go-Girl   HUGO (feat Github)를 이용한 정적 웹페이지 생성   "});index.add({'id':2,'href':'/docs/documents/projects/hugogirl/','title':"hU-Go-Girl",'section':"Projects",'content':"hU-Go-Girl #    Introduction #  여러가지를 진행하는 중에 기록이 필요한 상황들이 지속적으로 발생했습니다. 수많은 링크, 다양한 관심, 넘쳐나는 정보. 결국 그 와중에 습득한 내용들을 정리할 장치가 좀 필요했습니다. 또한 언제고 발생할 이직을 위한 포트폴리오나 동적 이력서도 같이 고민 중이 였습니다. 여러가지를 실험할 동적 웹보다는 단순 기록을 위한 정적 웹이 먼저 필요하다고 판단했고 이 프로젝트는 그에 대한 결과물입니다.\n이 과제를 통해 다음과 같은 주제를 다루게 될겁니다.\n Static Web page Hugo Jekyll Github Markdown Buy me a coffee  Static vs Dynamic #  정적웹은 편의점 같은 서비스를 의미합니다. 손님이 들어와서 선택할 수 있는 김밥은 제품으로 출시된 김밥 뿐입니다. 정적웹은 사용자의 요청에 준비된 응답만을 제공합니다.\n mermaid.initialize({ \"flowchart\": { \"useMaxWidth\":true }, \"theme\": \"default\" } ) graph LR A[ 사용자 ]--|요청|B[웹서버] B--|응답|A style A fill:#ffffff,stroke:#000000,stroke-width:1px style B fill:#ffffff,stroke:#000000,stroke-width:1px 동적웹은 요리점 같은 서비스를 의미합니다. 손님이 들어와서 원하는 음식을 주문하면 거기에 맞춰 요리를 제공합니다. 동적웹은 사용자의 요청을 처리하기 위해 좀더 복잡한 별도의 가공을 거치게 됩니다.\ngraph LR D[ 사용자 ]--|요청|F[웹서버]--|프로세싱|G[(DB서버)] G--|응답|F--|응답|D style D fill:#ffffff,stroke:#000000,stroke-width:1px style F fill:#ffffff,stroke:#000000,stroke-width:1px style G fill:#ffffff,stroke:#000000,stroke-width:1px 개인적인 용도로 웹페이지를 구성한다면 그리고 굳이 동적 서비스를 필요로 하지 않는다면 필요 이상의 복잡함을 감내할 필요는 없을 것입니다. 저도 역시 단순 기록의 용도라 지금은 정적웹이 적절한 선택인것 같습니다.\nGithub #  Git은 리눅스 커널의 소스코드 관리를 위해 리누스 토발즈1가 개발한 툴입니다. 공동 개발 상황에서 소스코드의 형상관리는 매우 어렵고 필수적인 요소입니다. 이런 Git을 위한 저장소를 무료로 제공하고 있는 대표적 사이트가 Github이며 이 쪽에서 제공되고 있는 서비스 중에는 웹 호스팅 서비스도 포함되어 있습니다.\n Github 가입 Repository 생성 Github Page 설정 Add a README file 포함 Setting \u0026gt; Github Pages \u0026gt; Source 설정  별다른 설정없이도 위와 같이 진행하였다면 Github가 제공하는 Default README.MD 화일을 자신 계정명이 포함되어 있는 주소에서 확인할 수 있습니다.\nJekyll vs Hugo #  Jekyll은 Github의 창립자2가 Ruby3라는 언어로 만든 정적 웹 생성기입니다. Github 가이드를 따라가다 보면 자연스럽게 Jekyll을 사용 해서 GitHub Page를 만드는 것을 설명하고 있습니다. Jekyll을 사용하면 별도의 빌드 없이 Git Push만으로도 Publish 된다는 특징이 있습니다.\nHugo는 최근 몇 년간 인기가 급상승 중인 구글의 Go로 만들어진 정적 웹 생성기입니다. 가볍고 빠른 속도를 장점으로 하고 있습니다. 이와 유사한 툴로 Hexo도 있었습니다만 사용해보진 못했습니다.4\n세가지 툴을 놓고 고민했보았고 Jekyll로 한번 Hugo로 한번 테스트 해본 후 저의 최종적인 선택은 Hugo였습니다. Jekyll이 디자인적으로나 기능적으로 완성도 높은 테마가 많았고 Github와의 연동에서 빌드없이 사용할 수 있다는 점은 저를 끝까지 고민하게 만들었습니다. 하지만 다루기 생소한 Ruby도 문제였지만 포스트가 늘어 날때마다 비례해서 늘어나는 빌드 속도는 나중에 문제가 될듯 보였습니다.5 실험적으로 사이트를 만들때 수시로 빌드하고 로컬로 테스트하게 되는데 페이지가 많아진다면 분명 괴로워지는 시점이 올듯했고 결국 Hugo를 선택하게 되었습니다.\nTheme #  문서와 기록이 주 용도이기 때문에 텍스트 기반에 간결한 테마를 검토했습니다. Jekyll에서는 Just-the-doc 테마를 고민했었고 Hugo에서는 Book 테마를 고민했습니다. Hugo를 사용함으로 자동적으로 Book 테마를 사용하게 되었는데 기존 디자인에서 몇몇 가지를 수정하여 사용하고 있습니다.\nMarkdown #  Markdown은 HTML과 같은 마크업 언어입니다. 마크업 언어라는건 별도 표현을 위한 기술을 의미합니다. 메모장에 아래 처럼 어떤 약속된 문법으로 작성하고 Hugo로 build하게 되면 약속된 HTML의 형태로 변경되게 됩니다.\nMarkdown은 이렇게 **표시**됩니다 Markdown은 이렇게 ~~표시~~됩니다 Markdown은 이렇게 표시됩니다\nMarkdown은 이렇게 표시됩니다\n문법이 쉽고 간단해서 빠르게 익힐 수 있고 글을 쓰는데에만 집중 할 수 있는 장점이 있다고 합니다.6\nBuy Me a Coffee #  선택적인 사항입니다만 최근 개인 블로그에서도 후원을 받을 수 있는 방법들이 소개되고 있습니다. Buy me a coffee라는 사이트인데요 먼저 Paypal에 가입하시고 BMC에도 가입하셔서 연동을 하시게되면 사이트의 방문객이 1$~5$ 정도를 해당 계좌로 송금할 수 있다고 합니다. 한국에서는 Paypal을 이용한 국내 계정간의 금전거래가 불가능한걸로 되어 있습니다.7 왼쪽 커피 아이콘으로 나름 커스터마이징 해서 달아 보았습니다만 저도 아직 기부를 받아 본적이 없어 실제적으로 작동하는지는 확인해보지 못했습니다.\nConclusion #  현재 이 글의 작성 방식은 1) 사용 에디터에 Markdown을 이용해 글을 작성하고 2) Hugo를 사용해 Public 경로로 Build하고 3) Git을 통해 Github에 Push하여 Web으로 올리고 있습니다. (현재는 Publish를 좀더 편안히 할 수 있는 방법을 찾아 보고 있습니다.)\n Reference #   생활코딩 : 버전관리 시스템 생활코딩 : Github  Footnote #    저명하신 키보드 워리어 \u0026#x21a9;\u0026#xfe0e;\n 톰 프레스톤 워너 \u0026#x21a9;\u0026#xfe0e;\n 일본산 \u0026#x21a9;\u0026#xfe0e;\n 비교 자료이지만 개인취향일듯 합니다 \u0026#x21a9;\u0026#xfe0e;\n 이런 내용이 검색되는걸 보면 확실히 문제가 있어보입니다. \u0026#x21a9;\u0026#xfe0e;\n 전 아직 집중을 할 수 없네요. \u0026#x21a9;\u0026#xfe0e;\n 한국 PayPal FAQs \u0026#x21a9;\u0026#xfe0e;\n   "});index.add({'id':3,'href':'/docs/documents/frontend/','title':"Front End",'section':"Documents",'content':"Front End #     Markdown   Markdown 문법 설명   "});index.add({'id':4,'href':'/docs/documents/frontend/markdown/','title':"Markdown",'section':"Front End",'content':"Markdown #   Markdown은 HTML 변환이 가능한 텍스트 기반 경량 마크업 언어입니다. 특수 기호와 문자를 이용해 쉽게 쓰고 읽을 수 있으며 문법이 비교적 쉽고 간단한 것이 특징입니다. 제 경우 익숙해질 수 있다면 글쓰기 자체에 집중할 수 있을 것으로 보여집니다.\nHeader #  마크다운 # H1 크기 제목입니다. ## H2 크기 제목입니다. ### H3 크기 제목입니다. #### H4 크기 제목입니다. ##### H5 크기 제목입니다. ###### H6 크기 제목입니다. 적용결과 H1 크기 제목입니다. H2 크기 제목입니다. H3 크기 제목입니다. H4 크기 제목입니다. H5 크기 제목입니다. H6 크기 제목입니다.  Emphasis #  마크다운 *강조 형태 1* _강조 형태 2_ **강조 형태 3** __강조 형태 4__ ~~강조 형태 5~~ 적용결과 강조 형태 1\n강조 형태 2\n강조 형태 3\n강조 형태 4\n강조 형태 5\n List #  마크다운 1. 순서 리스트 1 2. 순서 리스트 2 3. 순서 리스트 3 - 리스트 1 - 리스트 2 - 리스트 3 - 리스트 1 - 리스트 1-1 - 리스트 1-1-1 - 리스트 2 - 리스트 2-1 - 리스트 2-1-1 - 리스트 3 - 리스트 3-1 - 리스트 3-1-1 적용결과  순서 리스트 1 순서 리스트 2 순서 리스트 3    리스트 1\n  리스트 2\n  리스트 3\n  리스트 1\n 리스트 1-1  리스트 1-1-1      리스트 2\n 리스트 2-1  리스트 2-1-1      리스트 3\n 리스트 3-1  리스트 3-1-1       Blockquotes #  마크다운 \u0026gt; 인용 1 \u0026gt; 인용 2 \u0026gt; 인용 3 \u0026gt; 인용 1 \u0026gt;\u0026gt; 인용 2 \u0026gt;\u0026gt;\u0026gt; 인용 3 탭) 인용 1 탭) 인용 2 탭) 인용 3 적용결과  인용 1\n인용 2\n인용 3\n  인용 1\n 인용 2\n 인용 3\n   탭) 인용 1 탭) 인용 2 탭) 인용 3   Inline code #  마크다운 ```Rust fn main () { println!(\u0026#34;Hello World!\u0026#34;); } ``` \u0026lt;pre\u0026gt;\u0026lt;code\u0026gt; { fn main () { println!(\u0026#34;Hello World!\u0026#34;); } } \u0026lt;/code\u0026gt;\u0026lt;/pre\u0026gt; 적용결과 fn main () { println!(\u0026#34;Hello World!\u0026#34;); }  { fn main () { println!(\"Hello World!\"); } }   Tables #  마크다운 | Header1 | Header2 | Header3 | Header4 | Header5 | | :------ | ------: | :-----: | ------- | ------- | | a | b | c | **d** | ~~e~~ | | f | g | h | i | j | | k | l | m | n | o | 적용결과    Header1 Header2 Header3 Header4 Header5     a b c d e   f g h i j   k l m n o     Checkbox #  마크다운 1. [ ] To-Do 1 2. [x] To-Do 2 - [ ] To-Do 3 - [x] To-Do 4 적용결과  To-Do 1 To-Do 2   To-Do 3 To-Do 4   Hyperlinks #  마크다운 [Prokoptasis](https://prokoptasis.github.io/docs/documents/frontend/markdown/) 적용결과 Prokoptasis Images #  마크다운 ![coffee](../../../../../coffee.jpg) [![coffee](../../../../../coffee.jpg)](https://prokoptasis.github.io/docs/documents/frontend/markdown/) 적용결과  Iframe #  마크다운 \u0026lt;iframe width=\u0026#34;100%\u0026#34; height=\u0026#34;400px\u0026#34; src=\u0026#34;https://www.youtube.com/embed/4Vs25c7dzTQ\u0026#34; frameborder=\u0026#34;0\u0026#34; allow=\u0026#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\u0026#34; allowfullscreen\u0026gt;\u0026lt;/iframe\u0026gt; 적용결과   Etc #  마크다운 라인1 *** 라인2 --- 라인3 ___ 라인4 \u0026lt;hr\u0026gt; 문장 1 \u0026lt;br\u0026gt; 문장 2 (공백3칸) 문장 3 (공백없음) 문장 4 \u0026lt;div align=\u0026#34;center\u0026#34;\u0026gt;가운데 정렬\u0026lt;/div\u0026gt; \u0026lt;span style=\u0026#34;color:red\u0026#34;\u0026gt;빨\u0026lt;/span\u0026gt; \u0026lt;span style=\u0026#34;color:#0055FF\u0026#34;\u0026gt;파\u0026lt;/span\u0026gt; \u0026lt;span style=\u0026#34;color:rgb(21, 250, 16)\u0026#34;\u0026gt;녹\u0026lt;/span\u0026gt; 적용결과 라인1\n 라인2\n 라인3\n 라인4\n 문장 1 문장 2 (공백3칸)\n문장 3 (공백없음) 문장 4\n가운데 정렬 빨 파 녹\n Footnotes #  각주[^1] 각주1\n  각주입니다. \u0026#x21a9;\u0026#xfe0e;\n   "});index.add({'id':5,'href':'/docs/documents/backend/','title':"Back End",'section':"Documents",'content':"Back End #     SQL   SQL 문법 설명   "});index.add({'id':6,'href':'/docs/documents/backend/sql/','title':"SQL",'section':"Back End",'content':"SQL #   Introduction #  SQL은 Sturctured Query Langugage의 약자로 데이터베이스의 데이터를 관리하기 위해 사용하는 언어입니다. 자료의 검색과 관리, 스키마의 생성과 수정, 객체의 접근 조정 및 관리의 기능을 하게됩니다. ANSI SQL 기본 문법은 원래 어떤 데이터베이스와도 호환이 가능해야 하지만 통상 Vendor들이 표준을 잘지키지않는 편이라 기본적인 수준에서만 호환이 가능합니다. NoSQL 계열의 데이터베이스에서는 사용되지 않습니다.\n저는 일단 통상 제조업에서 많이 사용되고 있는 오라클사의 SQL을 기준으로 설명드리겠습니다.\nLive SQL #  정상적인 실습환경을 원한다면 XE버전이라도 오라클 데이터베이스를 설치하고 SQL Plus든 SQL Developer든 조회툴을 설치해야겠지만 개별 환경에 맞춰 설치하는 과정이 다소 까다롭습니다. 이에 오라클사의 Live SQL이라는 서비스로 대체해서 진행 하고자 합니다. 사용을 원하시면 Oracle에 가입하시고 Oracle Live SQL로 접속하셔서 \u0026ldquo;Start Coding Now\u0026quot;로 Live SQL을 실행합니다.\nLive SQL Basic #  SQL Worksheet 아래에 SQL을 쓰고 실행할 수 있는 Editor 창이 있고 그 밑에는 질의 결과를 조회할 수 있는 창이 있습니다. 오른쪽 위에는 \u0026ldquo;Run\u0026rdquo; Button이 있어 SQL을 실행할 수 있습니다. Ctrl-Enter를 통해도 역시 실행하실 수 있습니다. 다만 여러 문장을 적고 Ctrl-Enter나 Run을 실행하게되면 문장 모두가 수행되게 됩니다. 하나의 쿼리만을 개별적으로 실행하고 싶으시다면 블럭으로 선택 후 실행하셔야 합니다.\n여기까지 되셨다면 실습환경은 준비된것 같습니다. 격적으로 SQL을 진행해보도록 하겠습니다.\n다음글  "});index.add({'id':7,'href':'/docs/documents/backend/sql/sql01/','title':"SQL Basic 1",'section':"SQL",'content':"SQL Basic 1 #   DDL / DML / DCL #  보통은 Select 부터 설명드립니다만 Oracle Live SQL 특성상 조회를 할만한 예제 테이블이 없어서 앞으로 하게될 개념이해를 위해 DDL, DML, DCL 개념 부터 먼저 설명드립니다.\nDDL (Data Definition Language) #  데이터 정의 언어로 데이터베이스에 오브젝트를 생성,삭제,변경 및 제거하는 명령문을 이야기 합니다.\ncreate : 데이터베이스에 오브젝트를 생성합니다. drop : 데이터베이스에 오브젝트를 삭제합니다. alter : 데이터베이스에 오브젝트를 변경합니다. truncate : 테이블에서 데이터를 삭제합니다.\nDML (Data Manipulation Languge) #  데디터 조작 언어로 데이터베이스 테이블에서 데이터를 질의,생성,수정 및 삭제하는 질의문을 이야기 합니다.\nselect : 테이블에서 데이터를 검색 insert : 테이블에 데이터를 생성 update : 테이블에서 데이터를 변경 delete : 데이블에서 데이터를 삭제\nDCL (Data Control Language) #  데이터 제어 언어로 데이터베이스의 권한을 관리하는데 사용하는 명령문을 이야기 합니다.\ngrant : 데이터베이스 사용자에게 특정 권한을 부여 revoke : 데이터베이스 사용자에게 특정 권한을 제거\nTable Creation #  실습을 위해 예제 테이블을 생성하고 단순 질의문을 통해 결과를 조회해보도록 하겠습니다.\n작성쿼리 create table my_table_1 ( column_1 varchar2(10), column_2 number, column_3 date ) ; insert into my_table_1 (column_1,column_2,column_3) values (\u0026#39;홍길동\u0026#39;,23,sysdate); insert into my_table_1 (column_1,column_2,column_3) values (\u0026#39;김철수\u0026#39;,19,sysdate); insert into my_table_1 (column_1,column_2,column_3) values (\u0026#39;이영희\u0026#39;,32,sysdate); insert into my_table_1 (column_1,column_2,column_3) values (\u0026#39;박민호\u0026#39;,22,sysdate); insert into my_table_1 (column_1,column_2,column_3) values (\u0026#39;김종철\u0026#39;,45,sysdate); 실행결과 Table created.\n1 row(s) inserted.\n1 row(s) inserted.\n1 row(s) inserted.\n1 row(s) inserted.\n1 row(s) inserted.\n 데이터 생성 결과를 조회해보도록 하겠습니다. 아래 쿼리를 작성하고 실행하실때 아래 부분만 블록으로 선택하시고 실행하시거나 또는 앞의 내용을 지우고 실행하셔야 됩니다. 만일 블록 선택없이 실행시 create table 구문은 에러가 나고 insert는 중보처리되면서 select는 10건의 결과를 보여 줄 수 있습니다.\n작성쿼리 select * from my_table_1 ; 실행결과    COLUMN_1 COLUMN_2 COLUMN_3     홍길동 23 10-OCT-20   김철수 19 10-OCT-20   이영희 32 10-OCT-20   박민호 22 10-OCT-20   김종철 45 10-OCT-20    Download CSV 5 rows selected. 위의 실행결과와 같이 정상적으로 조회 되었다면 이제 본격적으로 SQL을 진행해보도록 하겠습니다.\n 다음글  "});index.add({'id':8,'href':'/docs/documents/backend/sql/sql02/','title':"SQL Basic 2",'section':"SQL",'content':"SQL Basic 2 #   현재 작성중입니다.\n  "});index.add({'id':9,'href':'/docs/documents/devops/','title':"Dev ops",'section':"Documents",'content':"Dev ops #     Oracle   Description   Synology   Description   Ubuntu   Description   Docker   Description   AWS   Description   "});index.add({'id':10,'href':'/docs/documents/deeplearning/','title':"Deep Learning",'section':"Documents",'content':"Deep Learning #     Machine Learning   머신러닝/딥러닝 학습 자료   Python   Description   Tensorflow   Description   "});index.add({'id':11,'href':'/docs/documents/deeplearning/machinelearning/','title':"Machine Learning",'section':"Deep Learning",'content':"Machine Learning #   Introduction #  머신 러닝 관련 학습 자료들을 정리한 내용입니다.\nMachine Learning 분류 #  머신 러닝은 지도학습, 비지도학습, 강화학습으로 분류하며 지도학습은 다시 회귀와 분류, 비지도 학습은 군집화,변환,연관으로 분류할 수 있습니다. 인터넷 상에 다양한 설명이 있습니다만 그림으로 직관적으로 분류 할 수 있는 egoing님의 자료를 참조하였습니다. 세부내용은 제목에 링크된 위키피디어를 참조해보시기 바랍니다.\n Supervised Learning  Regression Classification   Unsupervised Learning  Clustering Transform Association   Reinforcement Learning  Linear Regression1 #  Regression이란 \u0026ldquo;Regression toward mean\u0026quot;으로 특정한 데이터는 전체의 평균으로 회귀하려는 속성을 나타내며 일정 데이터의 분포를 가장 잘 설명 할 수 있는 직선의 방정식을 찾아내는 것을 나타냅니다. 말로는 설명이 아렵고 아래처럼 분포된 데이터의 점으로 표현되는 데이터들을 가장 잘 표현할 수 있는 직선을 찾는 것을 의미합니다.\n 위의 Linear Regression에서 직선의 방정식은 다음과 같이 나타낼 수 있습니다.\n Regression   \\( H(X) = WX\u0026#43;B ( y = ax \u0026#43; b ) \\)   \\( H : Hypothesis (가설) \\)   \\( W : Weight (기울기) \\)   \\( B : Bias (절편) \\)   그렇다면 데이터를 가장 잘 대변할 수 있는 직선은 무엇일까요? 아래 점으로 나타나는 데이터와 직선의 차이의 합이 가장 작을 수록 이들을 가장 잘 표현할 수 있다고 할 수 있습니다. 이러한 차이를 Cost라 하며 음수 차이와 양수 차이의 합이 상쇄되는 것을 막기 위해 제곱해서 사용하고 있습니다.\n   Cost  \\( Cost : H(x) - y \\)   \\( 전체 Cost : \\frac{(H(x_1)-y_1)^2 \u0026#43; (H(x_2)-y_2)^2 \u0026#43; ... \u0026#43; (H(x_n)-y_n)^2 }{n} \\)   \\( 전체 Cost : cost(W) = \\frac{1}{n}\\, \\textstyle\\sum_{i=1}^n \\,(Wx_i-y)^2 \\)   \\( Cost Function : cost(W,b) = \\frac{1}{n}\\, \\textstyle\\sum_{i=1}^n \\,(H(x_i)-y_i)^2 \\)   \\( Goal : minimize_w,_b cost(W,b) \\)   Gradient Descent #  위의 Cost Function에서 임의 점에서 시작하여 학습률 만큼 기울기가 낮은 쪽으로 진해하며 최적의 값을 찾는 방식을 경사하강법이라 한다.\n   Gradient Descent  \\( W := W - \\alpha \\frac{\\partial}{\\partial W} \\, \\frac{1}{2m} \\textstyle\\sum_{i=1}^m (W(x_i)-y_i)^2 \\)   \\( W := W - \\alpha \\frac{1}{2m} \\, \\textstyle\\sum_{i=1}^m 2(W(x_i)-y_i)X_i \\)   \\( W := W - \\alpha \\frac{1}{m} \\, \\textstyle\\sum_{i=1}^m 2(W(x_i)-y_i)X_i \\)   Derivative #   Derivative  \\( f\u0026#39;(x) = \\frac{\\Delta f(x)}{\\Delta x} = \\lim\\limits_{\\Delta x \\rightarrow 0 } \\, \\frac{f(x\u0026#43;\\Delta x)-f(x)}{\\Delta x} \\)    Derivative Basic  \\( f(x) = constant -\u0026gt; f\u0026#39;(x) = 0 \\)   \\( f\u0026#39;(x) = e ^ x =\u0026gt; f\u0026#39;(x) = e ^ x \\)   \\( f\u0026#39;(x) = e ^ -x =\u0026gt; f\u0026#39;(x) = -e ^ -x \\)   \\( f\u0026#39;(x) = ax ^ x =\u0026gt; f\u0026#39;(x) = nax ^ n-1 \\)   \\( f\u0026#39;(x) = ln ^ x =\u0026gt; f\u0026#39;(x) = {1} /over {x} \\)   \\( \\frac{1}{x} = x ^ -1 \\)    Partial Derivative  \\( f(x,y) = 2x \u0026#43; 3xy \u0026#43; y^3 \\)   \\( \\frac{\\partial f(x,y)}{\\partial x} = \\frac{\\partial(2x\u0026#43;3xy\u0026#43;y^3)}{\\partial x} = 2 \u0026#43; 3y \\)    Chain Rule  \\( \\frac{\\partial f}{\\partial x} = \\frac{\\partial f}{\\partial t} \\circ \\frac{\\partial t}{\\partial x} \\)   \\( f(x) = e ^ 3x^2 : e^t , t = 3x^2 \\)   \\( \\frac{\\partial f(x,y)}{\\partial x} = \\frac{\\partial(2x\u0026#43;3xy\u0026#43;y^3)}{\\partial x} = 2 \u0026#43; 3y \\)    Numerical Derivative  \\( f(x) = x^2 \\)   \\( f(x) = 3xe^x \\)    Loss Function  \\( Loss Funtion = \\frac{(t_1-y_1)^2 \u0026#43; (t_2-y_2)^2 \u0026#43; ... \u0026#43; (t_n-y_n)^2}{n} \\)   \\( = \\frac{[t_1-(Wx_1\u0026#43;b)]^2 \u0026#43; [t_2-(Wx_2\u0026#43;b)]^2 \u0026#43; ... \u0026#43; [t_n-(Wx_n\u0026#43;b)]^2}{n} \\)   \\( = \\frac{1}{n} \\, \\displaystyle\\sum_{i=1}^n \\, [t_i-(Wx_i\u0026#43;b)]^2 \\)    Learning Rate  \\( W = W - \\alpha \\, \\frac{\\partial E(W,b)}{\\partial W} \\)    Sigmoid  \\( Z = Wx \u0026#43; b \\)   \\( y = sigmoid(Z) = \\sigma (z) = \\frac{1}{1\u0026#43;e^-z} \\)    Cross Entropy  \\( y = \\frac{1}{1\u0026#43;e^-(Wx\u0026#43;b)} , t_i = 0 or 1 \\)   \\( E(W,b) = - \\, \\displaystyle\\sum_{i=1}^n \\, { \\lbrace t_i \\, \\log y_i \u0026#43; (1-t_i) \\log (1-y_i) \\rbrace } \\)     \u0026ldquo;Regression toward the mean\u0026rdquo;, Sir Francis Galton (1822~1911) \u0026#x21a9;\u0026#xfe0e;\n   "});index.add({'id':12,'href':'/docs/documents/deeplearning/tensorflow/','title':"Tensorflow",'section':"Deep Learning",'content':"Tensor Flow #   Introduction #  Tensor Flow 는 2015년 구글에서 공개한 머신러닝 라이브러리 입니다. 일반인들도 Python을 통해 머신러닝 프로그램을 작성할 수 있습니다. Keras는 Tensor Flow와 같은 딥러닝 라이브러리를 Backend로 사용하여 쉽게 신경망 모델을 구성할 수 있는 라이브러리입니다. 이런 Tensor Flow나 Keras는 Jupyter Notebook이라는 오픈 소스 웹 어플리케이션으로 실행하고 공유해볼 수 있는데 구글에서 무료로 제공하고 있는 Colab이라는 서비스를 통해 누구나가 쉽게 사용할 수 있게 되었습니다.\n mermaid.initialize({ \"flowchart\": { \"useMaxWidth\":true }, \"theme\": \"default\" } ) graph LR A((X:Tensor))--|Edge|C((+:Node))--|Edge|D((X+Y:Tensor)) B((Y:Tensor))--|Edge|C style A fill:#ffffff,stroke:#000000,stroke-width:1px style B fill:#ffffff,stroke:#000000,stroke-width:1px style C fill:#ffffff,stroke:#000000,stroke-width:1px style D fill:#ffffff,stroke:#000000,stroke-width:1px 현재 작성중입니다. "});index.add({'id':13,'href':'/docs/documents/business/','title':"Business",'section':"Documents",'content':"Business #     Supply Chain Management   Description   "});index.add({'id':14,'href':'/docs/documents/english/','title':"English",'section':"Documents",'content':"English #     English Expression   English Expression Diary   "});index.add({'id':15,'href':'/docs/documents/english/expression/','title':"English Expression",'section':"English",'content':"English Expression Diary #   Introduction #  영어 관련 흥미로웠던 표현들을 정리해보겠습니다.\nTry telling me English is easy. #  \u0026lsquo;Try me\u0026rsquo;는 \u0026lsquo;How you dare\u0026rsquo;의 뜻으로 이 문장은 sarcastic 하고 twisted된 문장입니다. 그래서 해석은 \u0026ldquo;어디 한번 영어가 쉽다고 말해보시지?\u0026rdquo; 정도 되겠습니다.\nEase into #  천천히 들듯이 적응하다는 의미입니다.\nFeel insecure about someone\u0026rsquo;s appearance #  외모에 자신감이 없다는 뜻입니다.\nElbow me in the rib #  팔꿈치로 가격하는 건지를 놓고 고민했었습니다. 옆구리를 쿡쿡 찌른다는 의미입니다. 왜 갈비뼈였을까요?\nBe good at #  \u0026ldquo;나 영어 잘 못해\u0026rdquo; 아주 자주 쓰는 표현인데 I can\u0026rsquo;t speak english well 정도만 쓰다가 I\u0026rsquo;m not good at English. 도 섞어쓰고 있습니다.\nStay safe #  항상 조심해 정도? 자매품 Be Safe. 조심해. 잘지내. 정도도 있습니다. 코로나 시대에 걸맞는 표현이죠.\nI don\u0026rsquo;t want your help to go in vain. #  in vain이 의미를 뒤집는걸 몰랐습니다. 괜히 쓸데없는 짓 하지마시라는 얘기더군요. \u0026ldquo;선생님께서 저 도와주신다는게 괜한 짓이 되는걸 원치않아요.\u0026rdquo; 인데 실제로는 \u0026ldquo;괜한짓 하지 않으셔도 되요\u0026rdquo;?\nThe mortifying ordeal of being known. #  표현이 좋아서 적었습니다. 의역하면 \u0026ldquo;알려졌다는 수치스러운 그 고통\u0026quot;이죠. Celebrities 한테 보내는 내용 같네요.\nThat\u0026rsquo;s so cheesy! #  오글거린다는 표현을 이렇게 쓰더군요.\nHe is so lucky his face does it for him when he has an attitude. #  \u0026ldquo;약간 거들먹 거려도 그의 얼굴이 받쳐주니 참 행운아네\u0026rdquo; 정도네요. My face do something!\nWhy would you do that?! #  의미가 두가지로 갈립니다. \u0026ldquo;왜 그럴려고 하는데?\u0026ldquo;와 \u0026ldquo;왜 그랬니\u0026rdquo; 정도입니다.\nGod complex #  신 컴플렉스이네요. 적절한 단어가 없었습니다. 자신이 신 또는 메시아라고 믿는 과대망상?\nShe is so catch. #  음 튕긴다는 표현이였습니다. \u0026ldquo;그녀는 철벽녀야\u0026rdquo; 정도.\nThe ramen will get mushy and soggy. #  \u0026ldquo;라면 불겠다\u0026quot;는 표현을 고민해본적이 없었는데 이거더군요.\nMirror selfie #  거울찍는 전신상 같은게 Mirror selfie더군요. 인스타그램용?\nShowing off #  생색낸다는 표현이네요.\nBe possessed by a ghost #  귀신들렸다는 표현입니다. Obsessed랑 차이가 뭔지 몰랐습니다. Obsessed는 집착이네요.\nhigh-maintenance #  손이 많이 간다는 표현을 이렇게 쓰더군요.\nI\u0026rsquo;m practicing passive listening while I study the bible. #  Try me 선생님 작품입니다. 성경을 공부하며 흘려듣기로 듣기 연습을 한다는 소리입니다.\nKeep your eyes peeled for my message coming soon. #  역시 Try me 선생님 작품입니다. 내가 답장할때까지 눈 똑바로 뜨고 잘보고 있어.\nCheeky #  아주 밉지 않은 얄이운걸 나타냅니다.\nBath dipper or pail #  손잡이 달린 바가지를 나타내네요.\nKeep your bangs #  Bangs가 앞머리를 뜻합니다. 앞머리 자르지 마란 얘기네요.\nFolded the paper star #  종이별 접는다는 이야기 입니다.\nSpirit animal #  한참을 고민한 단어입니다. 결론은 저희는 이런 단어가 없습니다. 대표 영혼? 롤모델?\nTo call on #  선생님들이 학생들한테 질문을 묻기 위해 부르는걸 이야기 하네요.\nHis research put forth 5 hypotheses. #  Put forth가 가설을 제시하다란 뜻이였네요. 그의 연구는 다섯가지의 가설의 제시한다.\nWhat are some cheesy pick-up lines in Korean? #  한국어로 오글거리는 작업멘트 알려주세요.\nSo the most I will do is send a message #  \u0026ldquo;The most I will do\u0026quot;라는게 사람 잡는 의미입니다. \u0026ldquo;그래서 내가 할 수 있는 것 중에 최고는 그냥 메세지를 보내는 겁니다\u0026quot;란 문장이다. 그 답글도 굉장히 훌륭했다. (Perfect!)\n 답글내용 ...  \u0026ldquo;The most I will do\u0026rdquo; does not mean that this is what I will do first, but rather this is the absolute maximum that I will do. Like If you say \u0026ldquo;the most I will do is send a message\u0026rdquo; then you\u0026rsquo;ll send a message but not more than that, such as making a call or meeting in person. Therefore, I think the translation should be \u0026ldquo;메세지를 보내는 것 이상은 하지 않을 거예요\u0026rdquo; \u0026ldquo;I won\u0026rsquo;t do more than just sending a mesaage\u0026rdquo;    Piggyback ride #  어부바를 궁금해들 하더군요.\nTo knead rice #  쌀을 빚다는거 어려웠습니다.\nThe power of someone\u0026rsquo;s glasses #  안경 도수 였습니다.\nWhat\u0026rsquo;s with you #  너 왜그러니?\n‎A smile curves up his lips #  그의 입가에 미소가 번졌다. 해석이 좋네요. 이걸 미소가 지으니 입꼬리가 올라갔다라고 번역했더랬습니다.\nThis cleanser is a splurge #  이 클린저는 돈낭비입니다.\nBullshitting #  지랄이라는 의미네요.\nAbbreation Form in messanger #  TY : Thank you YW : You\u0026rsquo;re welcome TTYL : Talk to you later. K : Okay. SUP : Wat\u0026rsquo;s UP? IK : I know.\n"});index.add({'id':16,'href':'/docs/documents/gamedev/','title':"Game Dev",'section':"Documents",'content':"Game Dev #     RUST   Rust Language   C   Description   C\u0026#43;\u0026#43;   Description   "});index.add({'id':17,'href':'/posts/2010122205/','title':"Mysterious Mathmathical",'section':"Blog",'content':" 해도 해도 기억 되지 않는 수학에는 어떠한 신비가 있는 걸까요? Deeplearning 3회차 보는 중인데 그냥 딱 보면 이해되었으면 좋겠습니다. 수학적 유도 필요는 없다고 하는데 모르고는 잘 넘어가지지가 않아서 계속 보는데 봐도 봐도 완전 새로운 이러는 설레임은 도대체 뭐죠?\n확실히 떨어지는 집중도를 잡기위한 고민을 좀 해보아야 겠습니다. 최근 계속 무리해서 뭔가를 해보려고 시도를 하지만 확실히 집중도는 떨어지고 책상머리에 앉아서 딴짓만 하는 자신을 발견하네요. 지속적으로 높은 집중도를 가지고 무엇가를 성취해나가는 사람들의 비결은 무엇일까요? 다시 집중해야겠습니다.\n  "});index.add({'id':18,'href':'/posts/2010102253/','title':"Opentutorial",'section':"Blog",'content':" 인터넷에는 꽤 많은 정보들이 있습니다만. 어느 선을 넘어가게되면 분명 무료의 한계를 겪게 됩니다. 당연히 살아가는 생활인으로서 컨텐츠 제작자도 생활인입니다. 모든 인터넷 컨텐츠가 무료라는게 적절하지 않습니다. 하지만 상당한 품질에 왜 유료가 아닌지 모를 컨텐츠들이 있어 가끔 놀라울 따름입니다. 그런 사이트가 있어 감사한 마음으로 소개를 드리고자 합니다.\n오픈튜토리얼스\n안에는 다른 많은 수업들이 있는데 저는 egoing이라는 분의 생활코딩을 보면서 상당한 도움을 받았습니다. 정보기술 전반에 걸쳐 굉장히 많은 분야가 상세히 잘 설명되어 있어 정보기술을 처음 접하시는 분들에게 더할 나위 없는 길잡이가 될거라고 생각합니다.\n  "});index.add({'id':19,'href':'/posts/2010092123/','title':"HiNative",'section':"Blog",'content':" Hugo에는 다국어 지원 기능이 있습니다. 다국어 페이지를 구성해 놓으면 간단하게 옵션 버튼으로 전환 할 수 있는 기능입니다. 영어로 동시에 작성하는걸 좀 시도를 해보았는데 한글로만 작성하는 것도 꽤 시간이 걸리는데 영어로는 도저히 답이 안나오더군요.\n어찌되었건 이 시도과정에서 제 영어 실력의 미천함을 깨닫고 도움이 될만한 사이트를 찾다가 HiNative라는 사이트를 발견하였습니다.\n간단히 설명드리면 각국의 다른 유저들이 상대방 언어에 대해 궁금한 내용을 올리면 해당 언어의 네이티브가 답변을 해주는 사이트입니다. 최근에 유료로 전환된 듯 보이는데 답변에는 큰 문제는 없더군요.\n첫번째로는 한국어에 대해 궁금한 외국인들이 많다는 것에 놀랐습니다. 질문 내용 중에 K-POP 가수들에 대한 내용 또는 팬레터같은 내용도 있더군요. 두번째로는 상당히 많은 분들이 훌륭한 답변을 달고 계셨습니다. 제 경우는 내용을 알아도 영어로 설명하기 다소 어렵더군요. 세번째로는 질문의 내용이 저를 고민하게 만들었습니다. 모국어로는 한번도 고민해본적 없는 미묘한 어감의 차이같은 건 정말 두번 세번 생각하게 되었습니다.\n처음에는 단순히 답변을 달다가 제가 영어에 대해 궁금해하거나 잘 모르는 부분이 한국어에 대해 질문하시는 분들과 유사할거란 생각이 들더군요.\n영어 공부 좀더 열심히 해야할 거 같다고 스스로 생각했습니다.\n 다음글  "});index.add({'id':20,'href':'/posts/2010081207/','title':"Principles...",'section':"Blog",'content':" 항상 시작이 어렵네요. 여러가지로 고민을 해보았습니다. 도대체 무엇을 위한 걸까요? 누구를 위한 걸까요? 왜 해야 하는 걸까요? 한참 고민하다가 오히려 이런 것들 때문에 시간만 잡아 먹고 본질을 놓치는 거 아닐가 생각했습니다. 그러다 몇가지로 생각이 모아지게 되었습니다.\n  욕심부리지 말자\n늘 하고 싶은게 많아서 모든걸 잘 해보려다 제풀에 지쳐버렸던 것 같습니다. 투자하는 시간도 노력도 확줄여야 겠다고 생각했습니다.\n  차근 차근 가자\n성격이 급한거 같습니다. 뭔가 다그쳐서 빨리 올라 갈 수 있는게 있고 길게 보아야 할게 있는거 같습니다. 몇몇은 길게 보려고 생각하고 있습니다.\n  빠르게 실행하자\n고민 보다는 실행을 먼저 하려고 생각했습니다. 이를테면 운영체제에 잘 모르는 프로그램들을 설치하는걸 무척 싫어했는데 그냥 부딪히면서 가야겠다고 생각했습니다.\n  나를 위해 하자\n지속적으로 고민했던 부분입니다. 누군가를 대상으로 무언가를 해야한다고 계속 생각했는데 기준을 잘 못잡겠었습니다. 그냥 제 자신의 기준으로 가보겠습니다.\n  경어를 쓰자\n제 자신을 위한다고 해도 개그 욕심이 나도 경어를 쓰기로 생각했습니다. 개그 욕심이 본질을 자꾸 흐리는거 같아요.\n  즐겁게 하자\n막 꽤 고통스럽게 삶을 헌신하듯이 가면 결국 탈이 나더군요. 의미가 없다면 언제든 그만두려고 생각했습니다.\n   다음글  "});index.add({'id':21,'href':'/posts/2009281207/','title':"Hello World!",'section':"Blog",'content':" 누구나 프로그래밍 언어를 배울때 항상 시작은 \u0026ldquo;Hello World\u0026quot;였지 않았을까요? 시작 하는 화면을 고민하다가 \u0026ldquo;Hello World!\u0026ldquo;를 떠올렸습니다. 그간 제 손을 거쳤던 \u0026ldquo;Hello World\u0026quot;를 쭉 되짚어 보았는데 좀 부끄러워졌네요. 제대로 할 줄 아는게 몇 개 없다고 생각했습니다. 그나마 먹고 살기 위해 손에 달고 있던 몇 개 정도 뿐이였습니다. 나름 꽤 열심히 산다고 살았는데 먹고 살기만 했나 봅니다. 돌이켜보면 이것저것 나름 시도는 많이 해보았는데 꾸준히는 못했던 것 같습니다. 이번에는 좀 꾸준히 끌고 가보자 생각했습니다. 그렇게 조급할 것도 없고 아쉬울 것도 없어서 정말 즐기면서 갈 수 있을 것 같은 기분이네요.\nhelloworldcollection\nASP.NET #  \u0026lt;%= \u0026#34;Hello World!\u0026#34; %\u0026gt;  언제 : 밀레니엄 즈음\u0026hellip;\n이유 : 개인 홈페이지 만든답시고\u0026hellip;\n BASIC #  10 PRINT \u0026#34;Hello World!\u0026#34;  언제 : 중딩시절\u0026hellip;\n이유 : 텍스트 기반 게임 제작한답시고\u0026hellip;\n C (Windows) #  #include \u0026lt;windows.h\u0026gt; int PASCAL WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR CmdLine, int Show) { MessageBox(GetActiveWindw(), \u0026#34;Hello World!\u0026#34;, \u0026#34;Hello Windows\u0026#34;, MB_OK); return 0; }  언제 : 대딩시절\u0026hellip;\n이유 : 윈도우 API 공부한답시고\u0026hellip;\n C# #  class HelloWorld { static void Main() { System.Console.WriteLine(\u0026#34;Hello, World!\u0026#34;); } }  언제 : 2009년 5월\u0026hellip;\n이유 : 모델링 툴 제작한답시고\u0026hellip;\n C++ (.NET CLI) #  using namespace System; void main() { console::WriteLine(\u0026#34;Hello World!\u0026#34;); }  언제 : 2003년 11월\u0026hellip;\n이유 : 이소메트릭 게임 제작한답시고\u0026hellip;\n ColdFusion #  \u0026lt;cfset message = \u0026#34;Hello World!\u0026#34;\u0026gt; \u0026lt;cfoutput\u0026gt; #message# \u0026lt;/cfoutput\u0026gt;  언제 : 석사시절\u0026hellip;\n이유 : 과제한답시고\u0026hellip;\n CommandScript #  echo \u0026#34;Hello World!\u0026#34;  언제 : 가끔\u0026hellip;\n이유 : 파일정리한답시고\u0026hellip;\n CSS #  body:before { content: \u0026#34;Hello World!\u0026#34;; }  언제 : 최근\u0026hellip;\n이유 : Frontend 공부한답시고\u0026hellip;\n Go #  package main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello Wrold!\u0026#34;) }  언제 : 최근\u0026hellip;\n이유 : Backend 공부한답시고\u0026hellip;\n HTML #  \u0026lt;HTML\u0026gt; \u0026lt;HEAD\u0026gt; \u0026lt;TITLE\u0026gt;Hello World!\u0026lt;TITLE\u0026gt; \u0026lt;/HEAD\u0026gt; \u0026lt;BODY\u0026gt; \u0026lt;H1\u0026gt;Hello World!\u0026lt;/H1\u0026gt; \u0026lt;/BODY\u0026gt; \u0026lt;/HTML\u0026gt;  언제 : 최근\u0026hellip;\n이유 : Frontend 공부한답시고\u0026hellip;\n Java #  class HelloWorld { static public void main (String args[]) { System.out.println(\u0026#34;Hello World!\u0026#34;); } }  언제 : 대딩시절\u0026hellip;\n이유 : 학부수업한답시고\u0026hellip;\n JavaScript #  console.log(\u0026#34;Hello World!\u0026#34;)  언제 : 최근\u0026hellip;\n이유 : Frontend 공부한답시고\u0026hellip;\n PHP #  \u0026lt;?php echo \u0026#39;Hello World!\u0026#39;; ?\u0026gt; 언제 : 대딩시절\u0026hellip;\n이유 : 개인 홈페이지 만든답시고\u0026hellip;\n ProC #  #include \u0026lt;stdio.h\u0026gt;EXEC SQL INCLUDE SQLCA; int main() { char hello[15]; char *user = \u0026#34;user\u0026#34;; char *pass = \u0026#34;password\u0026#34;; char *sid = \u0026#34;the_sid\u0026#34;; EXEC SQL CONNECT :user IDENTIFIED BY :password USING :sid; EXEC SQL SELECT \u0026#39;Hello World!\u0026#34; INTO :hello FROM DUAL; printf(\u0026#34;%s\\n\u0026#34;,hello) EXEC SQL COMMIT RELEASE; return 0; }  언제 : 2005년부터 2010년까지\u0026hellip;\n이유 : 먹고 산답시고\u0026hellip;\n Python3 #  print(\u0026#34;Hello World!\u0026#34;)  언제 : 최근\u0026hellip;\n이유 : 딥러닝 공부한답시고\u0026hellip;\n PL/SQL (Oracle) #  begin dbms_output.enable(1000); dbms_output.put_line(\u0026#39;Hello World!\u0026#39;); end;  언제 : 2005년 이후\u0026hellip;\n이유 : 먹고 산답시고\u0026hellip;\n Rust #  fn main () { println!(\u0026#34;Hello World!\u0026#34;); }  언제 : 최근\u0026hellip;\n이유 : Backend 공부한답시고\u0026hellip;\n SQL (Oracle) #  select \u0026#39;Hello World\u0026#39; from dual;  언제 : 2005년 이후\u0026hellip;\n이유 : 먹고 산답시고\u0026hellip;\n Unix Shell #  echo Hello World  언제 : 2005년부터 2010년까지\u0026hellip;\n이유 : 먹고 산답시고\u0026hellip;\n VBScript #  MsgBox \u0026#34;Hello world!\u0026#34; Reference #   [helloworldcollection] : 언어별 Hello World 모음 사이트\n 다음글  "});})();